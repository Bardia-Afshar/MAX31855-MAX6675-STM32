
MAX31855.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003674  08003674  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003674  08003674  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003674  08003674  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  080036ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080036ec  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006673  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014e2  00000000  00000000  0002670b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  00027bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  00028208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f684  00000000  00000000  00028758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000063f6  00000000  00000000  00037ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059a85  00000000  00000000  0003e1d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00097c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001788  00000000  00000000  00097cd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800355c 	.word	0x0800355c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800355c 	.word	0x0800355c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2iz>:
 8000220:	0241      	lsls	r1, r0, #9
 8000222:	0042      	lsls	r2, r0, #1
 8000224:	0fc3      	lsrs	r3, r0, #31
 8000226:	0a49      	lsrs	r1, r1, #9
 8000228:	0e12      	lsrs	r2, r2, #24
 800022a:	2000      	movs	r0, #0
 800022c:	2a7e      	cmp	r2, #126	; 0x7e
 800022e:	d90d      	bls.n	800024c <__aeabi_f2iz+0x2c>
 8000230:	2a9d      	cmp	r2, #157	; 0x9d
 8000232:	d80c      	bhi.n	800024e <__aeabi_f2iz+0x2e>
 8000234:	2080      	movs	r0, #128	; 0x80
 8000236:	0400      	lsls	r0, r0, #16
 8000238:	4301      	orrs	r1, r0
 800023a:	2a95      	cmp	r2, #149	; 0x95
 800023c:	dc0a      	bgt.n	8000254 <__aeabi_f2iz+0x34>
 800023e:	2096      	movs	r0, #150	; 0x96
 8000240:	1a82      	subs	r2, r0, r2
 8000242:	40d1      	lsrs	r1, r2
 8000244:	4248      	negs	r0, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d100      	bne.n	800024c <__aeabi_f2iz+0x2c>
 800024a:	0008      	movs	r0, r1
 800024c:	4770      	bx	lr
 800024e:	4a03      	ldr	r2, [pc, #12]	; (800025c <__aeabi_f2iz+0x3c>)
 8000250:	1898      	adds	r0, r3, r2
 8000252:	e7fb      	b.n	800024c <__aeabi_f2iz+0x2c>
 8000254:	3a96      	subs	r2, #150	; 0x96
 8000256:	4091      	lsls	r1, r2
 8000258:	e7f4      	b.n	8000244 <__aeabi_f2iz+0x24>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	7fffffff 	.word	0x7fffffff

08000260 <__aeabi_i2f>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	2800      	cmp	r0, #0
 8000264:	d03d      	beq.n	80002e2 <__aeabi_i2f+0x82>
 8000266:	17c3      	asrs	r3, r0, #31
 8000268:	18c5      	adds	r5, r0, r3
 800026a:	405d      	eors	r5, r3
 800026c:	0fc4      	lsrs	r4, r0, #31
 800026e:	0028      	movs	r0, r5
 8000270:	f000 fc00 	bl	8000a74 <__clzsi2>
 8000274:	229e      	movs	r2, #158	; 0x9e
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	2a96      	cmp	r2, #150	; 0x96
 800027a:	dc07      	bgt.n	800028c <__aeabi_i2f+0x2c>
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	2808      	cmp	r0, #8
 8000280:	dd33      	ble.n	80002ea <__aeabi_i2f+0x8a>
 8000282:	3808      	subs	r0, #8
 8000284:	4085      	lsls	r5, r0
 8000286:	0268      	lsls	r0, r5, #9
 8000288:	0a40      	lsrs	r0, r0, #9
 800028a:	e023      	b.n	80002d4 <__aeabi_i2f+0x74>
 800028c:	2a99      	cmp	r2, #153	; 0x99
 800028e:	dd0b      	ble.n	80002a8 <__aeabi_i2f+0x48>
 8000290:	2305      	movs	r3, #5
 8000292:	0029      	movs	r1, r5
 8000294:	1a1b      	subs	r3, r3, r0
 8000296:	40d9      	lsrs	r1, r3
 8000298:	0003      	movs	r3, r0
 800029a:	331b      	adds	r3, #27
 800029c:	409d      	lsls	r5, r3
 800029e:	002b      	movs	r3, r5
 80002a0:	1e5d      	subs	r5, r3, #1
 80002a2:	41ab      	sbcs	r3, r5
 80002a4:	4319      	orrs	r1, r3
 80002a6:	000d      	movs	r5, r1
 80002a8:	2805      	cmp	r0, #5
 80002aa:	dd01      	ble.n	80002b0 <__aeabi_i2f+0x50>
 80002ac:	1f43      	subs	r3, r0, #5
 80002ae:	409d      	lsls	r5, r3
 80002b0:	002b      	movs	r3, r5
 80002b2:	490f      	ldr	r1, [pc, #60]	; (80002f0 <__aeabi_i2f+0x90>)
 80002b4:	400b      	ands	r3, r1
 80002b6:	076e      	lsls	r6, r5, #29
 80002b8:	d009      	beq.n	80002ce <__aeabi_i2f+0x6e>
 80002ba:	260f      	movs	r6, #15
 80002bc:	4035      	ands	r5, r6
 80002be:	2d04      	cmp	r5, #4
 80002c0:	d005      	beq.n	80002ce <__aeabi_i2f+0x6e>
 80002c2:	3304      	adds	r3, #4
 80002c4:	015d      	lsls	r5, r3, #5
 80002c6:	d502      	bpl.n	80002ce <__aeabi_i2f+0x6e>
 80002c8:	229f      	movs	r2, #159	; 0x9f
 80002ca:	400b      	ands	r3, r1
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	019b      	lsls	r3, r3, #6
 80002d0:	0a58      	lsrs	r0, r3, #9
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	0240      	lsls	r0, r0, #9
 80002d6:	05d2      	lsls	r2, r2, #23
 80002d8:	0a40      	lsrs	r0, r0, #9
 80002da:	07e4      	lsls	r4, r4, #31
 80002dc:	4310      	orrs	r0, r2
 80002de:	4320      	orrs	r0, r4
 80002e0:	bd70      	pop	{r4, r5, r6, pc}
 80002e2:	2400      	movs	r4, #0
 80002e4:	2200      	movs	r2, #0
 80002e6:	2000      	movs	r0, #0
 80002e8:	e7f4      	b.n	80002d4 <__aeabi_i2f+0x74>
 80002ea:	0268      	lsls	r0, r5, #9
 80002ec:	0a40      	lsrs	r0, r0, #9
 80002ee:	e7f1      	b.n	80002d4 <__aeabi_i2f+0x74>
 80002f0:	fbffffff 	.word	0xfbffffff

080002f4 <__aeabi_ddiv>:
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	4657      	mov	r7, sl
 80002f8:	46de      	mov	lr, fp
 80002fa:	464e      	mov	r6, r9
 80002fc:	4645      	mov	r5, r8
 80002fe:	b5e0      	push	{r5, r6, r7, lr}
 8000300:	4683      	mov	fp, r0
 8000302:	0007      	movs	r7, r0
 8000304:	030e      	lsls	r6, r1, #12
 8000306:	0048      	lsls	r0, r1, #1
 8000308:	b085      	sub	sp, #20
 800030a:	4692      	mov	sl, r2
 800030c:	001c      	movs	r4, r3
 800030e:	0b36      	lsrs	r6, r6, #12
 8000310:	0d40      	lsrs	r0, r0, #21
 8000312:	0fcd      	lsrs	r5, r1, #31
 8000314:	2800      	cmp	r0, #0
 8000316:	d100      	bne.n	800031a <__aeabi_ddiv+0x26>
 8000318:	e09d      	b.n	8000456 <__aeabi_ddiv+0x162>
 800031a:	4b95      	ldr	r3, [pc, #596]	; (8000570 <__aeabi_ddiv+0x27c>)
 800031c:	4298      	cmp	r0, r3
 800031e:	d039      	beq.n	8000394 <__aeabi_ddiv+0xa0>
 8000320:	2380      	movs	r3, #128	; 0x80
 8000322:	00f6      	lsls	r6, r6, #3
 8000324:	041b      	lsls	r3, r3, #16
 8000326:	431e      	orrs	r6, r3
 8000328:	4a92      	ldr	r2, [pc, #584]	; (8000574 <__aeabi_ddiv+0x280>)
 800032a:	0f7b      	lsrs	r3, r7, #29
 800032c:	4333      	orrs	r3, r6
 800032e:	4699      	mov	r9, r3
 8000330:	4694      	mov	ip, r2
 8000332:	0003      	movs	r3, r0
 8000334:	4463      	add	r3, ip
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2300      	movs	r3, #0
 800033a:	2600      	movs	r6, #0
 800033c:	00ff      	lsls	r7, r7, #3
 800033e:	9302      	str	r3, [sp, #8]
 8000340:	0323      	lsls	r3, r4, #12
 8000342:	0b1b      	lsrs	r3, r3, #12
 8000344:	4698      	mov	r8, r3
 8000346:	0063      	lsls	r3, r4, #1
 8000348:	0fe4      	lsrs	r4, r4, #31
 800034a:	4652      	mov	r2, sl
 800034c:	0d5b      	lsrs	r3, r3, #21
 800034e:	9401      	str	r4, [sp, #4]
 8000350:	d100      	bne.n	8000354 <__aeabi_ddiv+0x60>
 8000352:	e0b3      	b.n	80004bc <__aeabi_ddiv+0x1c8>
 8000354:	4986      	ldr	r1, [pc, #536]	; (8000570 <__aeabi_ddiv+0x27c>)
 8000356:	428b      	cmp	r3, r1
 8000358:	d100      	bne.n	800035c <__aeabi_ddiv+0x68>
 800035a:	e09e      	b.n	800049a <__aeabi_ddiv+0x1a6>
 800035c:	4642      	mov	r2, r8
 800035e:	00d1      	lsls	r1, r2, #3
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	0412      	lsls	r2, r2, #16
 8000364:	430a      	orrs	r2, r1
 8000366:	4651      	mov	r1, sl
 8000368:	0f49      	lsrs	r1, r1, #29
 800036a:	4311      	orrs	r1, r2
 800036c:	468b      	mov	fp, r1
 800036e:	4981      	ldr	r1, [pc, #516]	; (8000574 <__aeabi_ddiv+0x280>)
 8000370:	4652      	mov	r2, sl
 8000372:	468c      	mov	ip, r1
 8000374:	9900      	ldr	r1, [sp, #0]
 8000376:	4463      	add	r3, ip
 8000378:	1acb      	subs	r3, r1, r3
 800037a:	2100      	movs	r1, #0
 800037c:	00d2      	lsls	r2, r2, #3
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	002b      	movs	r3, r5
 8000382:	4063      	eors	r3, r4
 8000384:	469a      	mov	sl, r3
 8000386:	2e0f      	cmp	r6, #15
 8000388:	d900      	bls.n	800038c <__aeabi_ddiv+0x98>
 800038a:	e105      	b.n	8000598 <__aeabi_ddiv+0x2a4>
 800038c:	4b7a      	ldr	r3, [pc, #488]	; (8000578 <__aeabi_ddiv+0x284>)
 800038e:	00b6      	lsls	r6, r6, #2
 8000390:	599b      	ldr	r3, [r3, r6]
 8000392:	469f      	mov	pc, r3
 8000394:	465b      	mov	r3, fp
 8000396:	4333      	orrs	r3, r6
 8000398:	4699      	mov	r9, r3
 800039a:	d000      	beq.n	800039e <__aeabi_ddiv+0xaa>
 800039c:	e0b8      	b.n	8000510 <__aeabi_ddiv+0x21c>
 800039e:	2302      	movs	r3, #2
 80003a0:	2608      	movs	r6, #8
 80003a2:	2700      	movs	r7, #0
 80003a4:	9000      	str	r0, [sp, #0]
 80003a6:	9302      	str	r3, [sp, #8]
 80003a8:	e7ca      	b.n	8000340 <__aeabi_ddiv+0x4c>
 80003aa:	46cb      	mov	fp, r9
 80003ac:	003a      	movs	r2, r7
 80003ae:	9902      	ldr	r1, [sp, #8]
 80003b0:	9501      	str	r5, [sp, #4]
 80003b2:	9b01      	ldr	r3, [sp, #4]
 80003b4:	469a      	mov	sl, r3
 80003b6:	2902      	cmp	r1, #2
 80003b8:	d027      	beq.n	800040a <__aeabi_ddiv+0x116>
 80003ba:	2903      	cmp	r1, #3
 80003bc:	d100      	bne.n	80003c0 <__aeabi_ddiv+0xcc>
 80003be:	e280      	b.n	80008c2 <__aeabi_ddiv+0x5ce>
 80003c0:	2901      	cmp	r1, #1
 80003c2:	d044      	beq.n	800044e <__aeabi_ddiv+0x15a>
 80003c4:	496d      	ldr	r1, [pc, #436]	; (800057c <__aeabi_ddiv+0x288>)
 80003c6:	9b00      	ldr	r3, [sp, #0]
 80003c8:	468c      	mov	ip, r1
 80003ca:	4463      	add	r3, ip
 80003cc:	001c      	movs	r4, r3
 80003ce:	2c00      	cmp	r4, #0
 80003d0:	dd38      	ble.n	8000444 <__aeabi_ddiv+0x150>
 80003d2:	0753      	lsls	r3, r2, #29
 80003d4:	d000      	beq.n	80003d8 <__aeabi_ddiv+0xe4>
 80003d6:	e213      	b.n	8000800 <__aeabi_ddiv+0x50c>
 80003d8:	08d2      	lsrs	r2, r2, #3
 80003da:	465b      	mov	r3, fp
 80003dc:	01db      	lsls	r3, r3, #7
 80003de:	d509      	bpl.n	80003f4 <__aeabi_ddiv+0x100>
 80003e0:	4659      	mov	r1, fp
 80003e2:	4b67      	ldr	r3, [pc, #412]	; (8000580 <__aeabi_ddiv+0x28c>)
 80003e4:	4019      	ands	r1, r3
 80003e6:	468b      	mov	fp, r1
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	00c9      	lsls	r1, r1, #3
 80003ec:	468c      	mov	ip, r1
 80003ee:	9b00      	ldr	r3, [sp, #0]
 80003f0:	4463      	add	r3, ip
 80003f2:	001c      	movs	r4, r3
 80003f4:	4b63      	ldr	r3, [pc, #396]	; (8000584 <__aeabi_ddiv+0x290>)
 80003f6:	429c      	cmp	r4, r3
 80003f8:	dc07      	bgt.n	800040a <__aeabi_ddiv+0x116>
 80003fa:	465b      	mov	r3, fp
 80003fc:	0564      	lsls	r4, r4, #21
 80003fe:	075f      	lsls	r7, r3, #29
 8000400:	025b      	lsls	r3, r3, #9
 8000402:	4317      	orrs	r7, r2
 8000404:	0b1b      	lsrs	r3, r3, #12
 8000406:	0d62      	lsrs	r2, r4, #21
 8000408:	e002      	b.n	8000410 <__aeabi_ddiv+0x11c>
 800040a:	2300      	movs	r3, #0
 800040c:	2700      	movs	r7, #0
 800040e:	4a58      	ldr	r2, [pc, #352]	; (8000570 <__aeabi_ddiv+0x27c>)
 8000410:	2100      	movs	r1, #0
 8000412:	031b      	lsls	r3, r3, #12
 8000414:	0b1c      	lsrs	r4, r3, #12
 8000416:	0d0b      	lsrs	r3, r1, #20
 8000418:	051b      	lsls	r3, r3, #20
 800041a:	4323      	orrs	r3, r4
 800041c:	0514      	lsls	r4, r2, #20
 800041e:	4a5a      	ldr	r2, [pc, #360]	; (8000588 <__aeabi_ddiv+0x294>)
 8000420:	0038      	movs	r0, r7
 8000422:	4013      	ands	r3, r2
 8000424:	431c      	orrs	r4, r3
 8000426:	4653      	mov	r3, sl
 8000428:	0064      	lsls	r4, r4, #1
 800042a:	07db      	lsls	r3, r3, #31
 800042c:	0864      	lsrs	r4, r4, #1
 800042e:	431c      	orrs	r4, r3
 8000430:	0021      	movs	r1, r4
 8000432:	b005      	add	sp, #20
 8000434:	bc3c      	pop	{r2, r3, r4, r5}
 8000436:	4690      	mov	r8, r2
 8000438:	4699      	mov	r9, r3
 800043a:	46a2      	mov	sl, r4
 800043c:	46ab      	mov	fp, r5
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000440:	2201      	movs	r2, #1
 8000442:	4252      	negs	r2, r2
 8000444:	2301      	movs	r3, #1
 8000446:	1b1b      	subs	r3, r3, r4
 8000448:	2b38      	cmp	r3, #56	; 0x38
 800044a:	dc00      	bgt.n	800044e <__aeabi_ddiv+0x15a>
 800044c:	e1ad      	b.n	80007aa <__aeabi_ddiv+0x4b6>
 800044e:	2200      	movs	r2, #0
 8000450:	2300      	movs	r3, #0
 8000452:	2700      	movs	r7, #0
 8000454:	e7dc      	b.n	8000410 <__aeabi_ddiv+0x11c>
 8000456:	465b      	mov	r3, fp
 8000458:	4333      	orrs	r3, r6
 800045a:	4699      	mov	r9, r3
 800045c:	d05e      	beq.n	800051c <__aeabi_ddiv+0x228>
 800045e:	2e00      	cmp	r6, #0
 8000460:	d100      	bne.n	8000464 <__aeabi_ddiv+0x170>
 8000462:	e18a      	b.n	800077a <__aeabi_ddiv+0x486>
 8000464:	0030      	movs	r0, r6
 8000466:	f000 fb05 	bl	8000a74 <__clzsi2>
 800046a:	0003      	movs	r3, r0
 800046c:	3b0b      	subs	r3, #11
 800046e:	2b1c      	cmp	r3, #28
 8000470:	dd00      	ble.n	8000474 <__aeabi_ddiv+0x180>
 8000472:	e17b      	b.n	800076c <__aeabi_ddiv+0x478>
 8000474:	221d      	movs	r2, #29
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	465a      	mov	r2, fp
 800047a:	0001      	movs	r1, r0
 800047c:	40da      	lsrs	r2, r3
 800047e:	3908      	subs	r1, #8
 8000480:	408e      	lsls	r6, r1
 8000482:	0013      	movs	r3, r2
 8000484:	465f      	mov	r7, fp
 8000486:	4333      	orrs	r3, r6
 8000488:	4699      	mov	r9, r3
 800048a:	408f      	lsls	r7, r1
 800048c:	4b3f      	ldr	r3, [pc, #252]	; (800058c <__aeabi_ddiv+0x298>)
 800048e:	2600      	movs	r6, #0
 8000490:	1a1b      	subs	r3, r3, r0
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	2300      	movs	r3, #0
 8000496:	9302      	str	r3, [sp, #8]
 8000498:	e752      	b.n	8000340 <__aeabi_ddiv+0x4c>
 800049a:	4641      	mov	r1, r8
 800049c:	4653      	mov	r3, sl
 800049e:	430b      	orrs	r3, r1
 80004a0:	493b      	ldr	r1, [pc, #236]	; (8000590 <__aeabi_ddiv+0x29c>)
 80004a2:	469b      	mov	fp, r3
 80004a4:	468c      	mov	ip, r1
 80004a6:	9b00      	ldr	r3, [sp, #0]
 80004a8:	4463      	add	r3, ip
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	465b      	mov	r3, fp
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d13b      	bne.n	800052a <__aeabi_ddiv+0x236>
 80004b2:	2302      	movs	r3, #2
 80004b4:	2200      	movs	r2, #0
 80004b6:	431e      	orrs	r6, r3
 80004b8:	2102      	movs	r1, #2
 80004ba:	e761      	b.n	8000380 <__aeabi_ddiv+0x8c>
 80004bc:	4643      	mov	r3, r8
 80004be:	4313      	orrs	r3, r2
 80004c0:	469b      	mov	fp, r3
 80004c2:	d037      	beq.n	8000534 <__aeabi_ddiv+0x240>
 80004c4:	4643      	mov	r3, r8
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d100      	bne.n	80004cc <__aeabi_ddiv+0x1d8>
 80004ca:	e162      	b.n	8000792 <__aeabi_ddiv+0x49e>
 80004cc:	4640      	mov	r0, r8
 80004ce:	f000 fad1 	bl	8000a74 <__clzsi2>
 80004d2:	0003      	movs	r3, r0
 80004d4:	3b0b      	subs	r3, #11
 80004d6:	2b1c      	cmp	r3, #28
 80004d8:	dd00      	ble.n	80004dc <__aeabi_ddiv+0x1e8>
 80004da:	e153      	b.n	8000784 <__aeabi_ddiv+0x490>
 80004dc:	0002      	movs	r2, r0
 80004de:	4641      	mov	r1, r8
 80004e0:	3a08      	subs	r2, #8
 80004e2:	4091      	lsls	r1, r2
 80004e4:	4688      	mov	r8, r1
 80004e6:	211d      	movs	r1, #29
 80004e8:	1acb      	subs	r3, r1, r3
 80004ea:	4651      	mov	r1, sl
 80004ec:	40d9      	lsrs	r1, r3
 80004ee:	000b      	movs	r3, r1
 80004f0:	4641      	mov	r1, r8
 80004f2:	430b      	orrs	r3, r1
 80004f4:	469b      	mov	fp, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001a      	movs	r2, r3
 80004fc:	9b00      	ldr	r3, [sp, #0]
 80004fe:	4925      	ldr	r1, [pc, #148]	; (8000594 <__aeabi_ddiv+0x2a0>)
 8000500:	469c      	mov	ip, r3
 8000502:	4460      	add	r0, ip
 8000504:	0003      	movs	r3, r0
 8000506:	468c      	mov	ip, r1
 8000508:	4463      	add	r3, ip
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2100      	movs	r1, #0
 800050e:	e737      	b.n	8000380 <__aeabi_ddiv+0x8c>
 8000510:	2303      	movs	r3, #3
 8000512:	46b1      	mov	r9, r6
 8000514:	9000      	str	r0, [sp, #0]
 8000516:	260c      	movs	r6, #12
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	e711      	b.n	8000340 <__aeabi_ddiv+0x4c>
 800051c:	2300      	movs	r3, #0
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	2604      	movs	r6, #4
 8000524:	2700      	movs	r7, #0
 8000526:	9302      	str	r3, [sp, #8]
 8000528:	e70a      	b.n	8000340 <__aeabi_ddiv+0x4c>
 800052a:	2303      	movs	r3, #3
 800052c:	46c3      	mov	fp, r8
 800052e:	431e      	orrs	r6, r3
 8000530:	2103      	movs	r1, #3
 8000532:	e725      	b.n	8000380 <__aeabi_ddiv+0x8c>
 8000534:	3301      	adds	r3, #1
 8000536:	431e      	orrs	r6, r3
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	e720      	b.n	8000380 <__aeabi_ddiv+0x8c>
 800053e:	2300      	movs	r3, #0
 8000540:	469a      	mov	sl, r3
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	2700      	movs	r7, #0
 8000546:	031b      	lsls	r3, r3, #12
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <__aeabi_ddiv+0x27c>)
 800054a:	e761      	b.n	8000410 <__aeabi_ddiv+0x11c>
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	4649      	mov	r1, r9
 8000550:	031b      	lsls	r3, r3, #12
 8000552:	4219      	tst	r1, r3
 8000554:	d100      	bne.n	8000558 <__aeabi_ddiv+0x264>
 8000556:	e0e2      	b.n	800071e <__aeabi_ddiv+0x42a>
 8000558:	4659      	mov	r1, fp
 800055a:	4219      	tst	r1, r3
 800055c:	d000      	beq.n	8000560 <__aeabi_ddiv+0x26c>
 800055e:	e0de      	b.n	800071e <__aeabi_ddiv+0x42a>
 8000560:	430b      	orrs	r3, r1
 8000562:	031b      	lsls	r3, r3, #12
 8000564:	0017      	movs	r7, r2
 8000566:	0b1b      	lsrs	r3, r3, #12
 8000568:	46a2      	mov	sl, r4
 800056a:	4a01      	ldr	r2, [pc, #4]	; (8000570 <__aeabi_ddiv+0x27c>)
 800056c:	e750      	b.n	8000410 <__aeabi_ddiv+0x11c>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	000007ff 	.word	0x000007ff
 8000574:	fffffc01 	.word	0xfffffc01
 8000578:	080035f0 	.word	0x080035f0
 800057c:	000003ff 	.word	0x000003ff
 8000580:	feffffff 	.word	0xfeffffff
 8000584:	000007fe 	.word	0x000007fe
 8000588:	800fffff 	.word	0x800fffff
 800058c:	fffffc0d 	.word	0xfffffc0d
 8000590:	fffff801 	.word	0xfffff801
 8000594:	000003f3 	.word	0x000003f3
 8000598:	45d9      	cmp	r9, fp
 800059a:	d900      	bls.n	800059e <__aeabi_ddiv+0x2aa>
 800059c:	e0cb      	b.n	8000736 <__aeabi_ddiv+0x442>
 800059e:	d100      	bne.n	80005a2 <__aeabi_ddiv+0x2ae>
 80005a0:	e0c6      	b.n	8000730 <__aeabi_ddiv+0x43c>
 80005a2:	003c      	movs	r4, r7
 80005a4:	4648      	mov	r0, r9
 80005a6:	2700      	movs	r7, #0
 80005a8:	9b00      	ldr	r3, [sp, #0]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	465b      	mov	r3, fp
 80005b0:	0e16      	lsrs	r6, r2, #24
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	431e      	orrs	r6, r3
 80005b6:	0213      	lsls	r3, r2, #8
 80005b8:	4698      	mov	r8, r3
 80005ba:	0433      	lsls	r3, r6, #16
 80005bc:	0c1b      	lsrs	r3, r3, #16
 80005be:	4699      	mov	r9, r3
 80005c0:	0c31      	lsrs	r1, r6, #16
 80005c2:	9101      	str	r1, [sp, #4]
 80005c4:	f7ff fe26 	bl	8000214 <__aeabi_uidivmod>
 80005c8:	464a      	mov	r2, r9
 80005ca:	4342      	muls	r2, r0
 80005cc:	040b      	lsls	r3, r1, #16
 80005ce:	0c21      	lsrs	r1, r4, #16
 80005d0:	0005      	movs	r5, r0
 80005d2:	4319      	orrs	r1, r3
 80005d4:	428a      	cmp	r2, r1
 80005d6:	d907      	bls.n	80005e8 <__aeabi_ddiv+0x2f4>
 80005d8:	1989      	adds	r1, r1, r6
 80005da:	3d01      	subs	r5, #1
 80005dc:	428e      	cmp	r6, r1
 80005de:	d803      	bhi.n	80005e8 <__aeabi_ddiv+0x2f4>
 80005e0:	428a      	cmp	r2, r1
 80005e2:	d901      	bls.n	80005e8 <__aeabi_ddiv+0x2f4>
 80005e4:	1e85      	subs	r5, r0, #2
 80005e6:	1989      	adds	r1, r1, r6
 80005e8:	1a88      	subs	r0, r1, r2
 80005ea:	9901      	ldr	r1, [sp, #4]
 80005ec:	f7ff fe12 	bl	8000214 <__aeabi_uidivmod>
 80005f0:	0409      	lsls	r1, r1, #16
 80005f2:	468c      	mov	ip, r1
 80005f4:	464a      	mov	r2, r9
 80005f6:	0421      	lsls	r1, r4, #16
 80005f8:	4664      	mov	r4, ip
 80005fa:	4342      	muls	r2, r0
 80005fc:	0c09      	lsrs	r1, r1, #16
 80005fe:	0003      	movs	r3, r0
 8000600:	4321      	orrs	r1, r4
 8000602:	428a      	cmp	r2, r1
 8000604:	d904      	bls.n	8000610 <__aeabi_ddiv+0x31c>
 8000606:	1989      	adds	r1, r1, r6
 8000608:	3b01      	subs	r3, #1
 800060a:	428e      	cmp	r6, r1
 800060c:	d800      	bhi.n	8000610 <__aeabi_ddiv+0x31c>
 800060e:	e0f1      	b.n	80007f4 <__aeabi_ddiv+0x500>
 8000610:	042d      	lsls	r5, r5, #16
 8000612:	431d      	orrs	r5, r3
 8000614:	46ab      	mov	fp, r5
 8000616:	4643      	mov	r3, r8
 8000618:	1a89      	subs	r1, r1, r2
 800061a:	4642      	mov	r2, r8
 800061c:	0c28      	lsrs	r0, r5, #16
 800061e:	0412      	lsls	r2, r2, #16
 8000620:	0c1d      	lsrs	r5, r3, #16
 8000622:	465b      	mov	r3, fp
 8000624:	0c14      	lsrs	r4, r2, #16
 8000626:	0022      	movs	r2, r4
 8000628:	041b      	lsls	r3, r3, #16
 800062a:	0c1b      	lsrs	r3, r3, #16
 800062c:	435a      	muls	r2, r3
 800062e:	9403      	str	r4, [sp, #12]
 8000630:	436b      	muls	r3, r5
 8000632:	4344      	muls	r4, r0
 8000634:	9502      	str	r5, [sp, #8]
 8000636:	4368      	muls	r0, r5
 8000638:	191b      	adds	r3, r3, r4
 800063a:	0c15      	lsrs	r5, r2, #16
 800063c:	18eb      	adds	r3, r5, r3
 800063e:	429c      	cmp	r4, r3
 8000640:	d903      	bls.n	800064a <__aeabi_ddiv+0x356>
 8000642:	2480      	movs	r4, #128	; 0x80
 8000644:	0264      	lsls	r4, r4, #9
 8000646:	46a4      	mov	ip, r4
 8000648:	4460      	add	r0, ip
 800064a:	0c1c      	lsrs	r4, r3, #16
 800064c:	0415      	lsls	r5, r2, #16
 800064e:	041b      	lsls	r3, r3, #16
 8000650:	0c2d      	lsrs	r5, r5, #16
 8000652:	1820      	adds	r0, r4, r0
 8000654:	195d      	adds	r5, r3, r5
 8000656:	4281      	cmp	r1, r0
 8000658:	d377      	bcc.n	800074a <__aeabi_ddiv+0x456>
 800065a:	d073      	beq.n	8000744 <__aeabi_ddiv+0x450>
 800065c:	1a0c      	subs	r4, r1, r0
 800065e:	4aa2      	ldr	r2, [pc, #648]	; (80008e8 <__aeabi_ddiv+0x5f4>)
 8000660:	1b7d      	subs	r5, r7, r5
 8000662:	42af      	cmp	r7, r5
 8000664:	41bf      	sbcs	r7, r7
 8000666:	4694      	mov	ip, r2
 8000668:	9b00      	ldr	r3, [sp, #0]
 800066a:	427f      	negs	r7, r7
 800066c:	4463      	add	r3, ip
 800066e:	1be0      	subs	r0, r4, r7
 8000670:	001c      	movs	r4, r3
 8000672:	4286      	cmp	r6, r0
 8000674:	d100      	bne.n	8000678 <__aeabi_ddiv+0x384>
 8000676:	e0db      	b.n	8000830 <__aeabi_ddiv+0x53c>
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	f7ff fdcb 	bl	8000214 <__aeabi_uidivmod>
 800067e:	464a      	mov	r2, r9
 8000680:	4342      	muls	r2, r0
 8000682:	040b      	lsls	r3, r1, #16
 8000684:	0c29      	lsrs	r1, r5, #16
 8000686:	0007      	movs	r7, r0
 8000688:	4319      	orrs	r1, r3
 800068a:	428a      	cmp	r2, r1
 800068c:	d907      	bls.n	800069e <__aeabi_ddiv+0x3aa>
 800068e:	1989      	adds	r1, r1, r6
 8000690:	3f01      	subs	r7, #1
 8000692:	428e      	cmp	r6, r1
 8000694:	d803      	bhi.n	800069e <__aeabi_ddiv+0x3aa>
 8000696:	428a      	cmp	r2, r1
 8000698:	d901      	bls.n	800069e <__aeabi_ddiv+0x3aa>
 800069a:	1e87      	subs	r7, r0, #2
 800069c:	1989      	adds	r1, r1, r6
 800069e:	1a88      	subs	r0, r1, r2
 80006a0:	9901      	ldr	r1, [sp, #4]
 80006a2:	f7ff fdb7 	bl	8000214 <__aeabi_uidivmod>
 80006a6:	0409      	lsls	r1, r1, #16
 80006a8:	464a      	mov	r2, r9
 80006aa:	4689      	mov	r9, r1
 80006ac:	0429      	lsls	r1, r5, #16
 80006ae:	464d      	mov	r5, r9
 80006b0:	4342      	muls	r2, r0
 80006b2:	0c09      	lsrs	r1, r1, #16
 80006b4:	0003      	movs	r3, r0
 80006b6:	4329      	orrs	r1, r5
 80006b8:	428a      	cmp	r2, r1
 80006ba:	d907      	bls.n	80006cc <__aeabi_ddiv+0x3d8>
 80006bc:	1989      	adds	r1, r1, r6
 80006be:	3b01      	subs	r3, #1
 80006c0:	428e      	cmp	r6, r1
 80006c2:	d803      	bhi.n	80006cc <__aeabi_ddiv+0x3d8>
 80006c4:	428a      	cmp	r2, r1
 80006c6:	d901      	bls.n	80006cc <__aeabi_ddiv+0x3d8>
 80006c8:	1e83      	subs	r3, r0, #2
 80006ca:	1989      	adds	r1, r1, r6
 80006cc:	043f      	lsls	r7, r7, #16
 80006ce:	1a89      	subs	r1, r1, r2
 80006d0:	003a      	movs	r2, r7
 80006d2:	9f03      	ldr	r7, [sp, #12]
 80006d4:	431a      	orrs	r2, r3
 80006d6:	0038      	movs	r0, r7
 80006d8:	0413      	lsls	r3, r2, #16
 80006da:	0c1b      	lsrs	r3, r3, #16
 80006dc:	4358      	muls	r0, r3
 80006de:	4681      	mov	r9, r0
 80006e0:	9802      	ldr	r0, [sp, #8]
 80006e2:	0c15      	lsrs	r5, r2, #16
 80006e4:	436f      	muls	r7, r5
 80006e6:	4343      	muls	r3, r0
 80006e8:	4345      	muls	r5, r0
 80006ea:	4648      	mov	r0, r9
 80006ec:	0c00      	lsrs	r0, r0, #16
 80006ee:	4684      	mov	ip, r0
 80006f0:	19db      	adds	r3, r3, r7
 80006f2:	4463      	add	r3, ip
 80006f4:	429f      	cmp	r7, r3
 80006f6:	d903      	bls.n	8000700 <__aeabi_ddiv+0x40c>
 80006f8:	2080      	movs	r0, #128	; 0x80
 80006fa:	0240      	lsls	r0, r0, #9
 80006fc:	4684      	mov	ip, r0
 80006fe:	4465      	add	r5, ip
 8000700:	4648      	mov	r0, r9
 8000702:	0c1f      	lsrs	r7, r3, #16
 8000704:	0400      	lsls	r0, r0, #16
 8000706:	041b      	lsls	r3, r3, #16
 8000708:	0c00      	lsrs	r0, r0, #16
 800070a:	197d      	adds	r5, r7, r5
 800070c:	1818      	adds	r0, r3, r0
 800070e:	42a9      	cmp	r1, r5
 8000710:	d200      	bcs.n	8000714 <__aeabi_ddiv+0x420>
 8000712:	e084      	b.n	800081e <__aeabi_ddiv+0x52a>
 8000714:	d100      	bne.n	8000718 <__aeabi_ddiv+0x424>
 8000716:	e07f      	b.n	8000818 <__aeabi_ddiv+0x524>
 8000718:	2301      	movs	r3, #1
 800071a:	431a      	orrs	r2, r3
 800071c:	e657      	b.n	80003ce <__aeabi_ddiv+0xda>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	464a      	mov	r2, r9
 8000722:	031b      	lsls	r3, r3, #12
 8000724:	4313      	orrs	r3, r2
 8000726:	031b      	lsls	r3, r3, #12
 8000728:	0b1b      	lsrs	r3, r3, #12
 800072a:	46aa      	mov	sl, r5
 800072c:	4a6f      	ldr	r2, [pc, #444]	; (80008ec <__aeabi_ddiv+0x5f8>)
 800072e:	e66f      	b.n	8000410 <__aeabi_ddiv+0x11c>
 8000730:	42ba      	cmp	r2, r7
 8000732:	d900      	bls.n	8000736 <__aeabi_ddiv+0x442>
 8000734:	e735      	b.n	80005a2 <__aeabi_ddiv+0x2ae>
 8000736:	464b      	mov	r3, r9
 8000738:	07dc      	lsls	r4, r3, #31
 800073a:	0858      	lsrs	r0, r3, #1
 800073c:	087b      	lsrs	r3, r7, #1
 800073e:	431c      	orrs	r4, r3
 8000740:	07ff      	lsls	r7, r7, #31
 8000742:	e734      	b.n	80005ae <__aeabi_ddiv+0x2ba>
 8000744:	2400      	movs	r4, #0
 8000746:	42af      	cmp	r7, r5
 8000748:	d289      	bcs.n	800065e <__aeabi_ddiv+0x36a>
 800074a:	4447      	add	r7, r8
 800074c:	4547      	cmp	r7, r8
 800074e:	41a4      	sbcs	r4, r4
 8000750:	465b      	mov	r3, fp
 8000752:	4264      	negs	r4, r4
 8000754:	19a4      	adds	r4, r4, r6
 8000756:	1864      	adds	r4, r4, r1
 8000758:	3b01      	subs	r3, #1
 800075a:	42a6      	cmp	r6, r4
 800075c:	d21e      	bcs.n	800079c <__aeabi_ddiv+0x4a8>
 800075e:	42a0      	cmp	r0, r4
 8000760:	d86d      	bhi.n	800083e <__aeabi_ddiv+0x54a>
 8000762:	d100      	bne.n	8000766 <__aeabi_ddiv+0x472>
 8000764:	e0b6      	b.n	80008d4 <__aeabi_ddiv+0x5e0>
 8000766:	1a24      	subs	r4, r4, r0
 8000768:	469b      	mov	fp, r3
 800076a:	e778      	b.n	800065e <__aeabi_ddiv+0x36a>
 800076c:	0003      	movs	r3, r0
 800076e:	465a      	mov	r2, fp
 8000770:	3b28      	subs	r3, #40	; 0x28
 8000772:	409a      	lsls	r2, r3
 8000774:	2700      	movs	r7, #0
 8000776:	4691      	mov	r9, r2
 8000778:	e688      	b.n	800048c <__aeabi_ddiv+0x198>
 800077a:	4658      	mov	r0, fp
 800077c:	f000 f97a 	bl	8000a74 <__clzsi2>
 8000780:	3020      	adds	r0, #32
 8000782:	e672      	b.n	800046a <__aeabi_ddiv+0x176>
 8000784:	0003      	movs	r3, r0
 8000786:	4652      	mov	r2, sl
 8000788:	3b28      	subs	r3, #40	; 0x28
 800078a:	409a      	lsls	r2, r3
 800078c:	4693      	mov	fp, r2
 800078e:	2200      	movs	r2, #0
 8000790:	e6b4      	b.n	80004fc <__aeabi_ddiv+0x208>
 8000792:	4650      	mov	r0, sl
 8000794:	f000 f96e 	bl	8000a74 <__clzsi2>
 8000798:	3020      	adds	r0, #32
 800079a:	e69a      	b.n	80004d2 <__aeabi_ddiv+0x1de>
 800079c:	42a6      	cmp	r6, r4
 800079e:	d1e2      	bne.n	8000766 <__aeabi_ddiv+0x472>
 80007a0:	45b8      	cmp	r8, r7
 80007a2:	d9dc      	bls.n	800075e <__aeabi_ddiv+0x46a>
 80007a4:	1a34      	subs	r4, r6, r0
 80007a6:	469b      	mov	fp, r3
 80007a8:	e759      	b.n	800065e <__aeabi_ddiv+0x36a>
 80007aa:	2b1f      	cmp	r3, #31
 80007ac:	dc65      	bgt.n	800087a <__aeabi_ddiv+0x586>
 80007ae:	4c50      	ldr	r4, [pc, #320]	; (80008f0 <__aeabi_ddiv+0x5fc>)
 80007b0:	9900      	ldr	r1, [sp, #0]
 80007b2:	46a4      	mov	ip, r4
 80007b4:	465c      	mov	r4, fp
 80007b6:	4461      	add	r1, ip
 80007b8:	0008      	movs	r0, r1
 80007ba:	408c      	lsls	r4, r1
 80007bc:	0011      	movs	r1, r2
 80007be:	4082      	lsls	r2, r0
 80007c0:	40d9      	lsrs	r1, r3
 80007c2:	1e50      	subs	r0, r2, #1
 80007c4:	4182      	sbcs	r2, r0
 80007c6:	430c      	orrs	r4, r1
 80007c8:	4314      	orrs	r4, r2
 80007ca:	465a      	mov	r2, fp
 80007cc:	40da      	lsrs	r2, r3
 80007ce:	0013      	movs	r3, r2
 80007d0:	0762      	lsls	r2, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_ddiv+0x4f4>
 80007d4:	220f      	movs	r2, #15
 80007d6:	4022      	ands	r2, r4
 80007d8:	2a04      	cmp	r2, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_ddiv+0x4f4>
 80007dc:	0022      	movs	r2, r4
 80007de:	1d14      	adds	r4, r2, #4
 80007e0:	4294      	cmp	r4, r2
 80007e2:	4189      	sbcs	r1, r1
 80007e4:	4249      	negs	r1, r1
 80007e6:	185b      	adds	r3, r3, r1
 80007e8:	021a      	lsls	r2, r3, #8
 80007ea:	d562      	bpl.n	80008b2 <__aeabi_ddiv+0x5be>
 80007ec:	2201      	movs	r2, #1
 80007ee:	2300      	movs	r3, #0
 80007f0:	2700      	movs	r7, #0
 80007f2:	e60d      	b.n	8000410 <__aeabi_ddiv+0x11c>
 80007f4:	428a      	cmp	r2, r1
 80007f6:	d800      	bhi.n	80007fa <__aeabi_ddiv+0x506>
 80007f8:	e70a      	b.n	8000610 <__aeabi_ddiv+0x31c>
 80007fa:	1e83      	subs	r3, r0, #2
 80007fc:	1989      	adds	r1, r1, r6
 80007fe:	e707      	b.n	8000610 <__aeabi_ddiv+0x31c>
 8000800:	230f      	movs	r3, #15
 8000802:	4013      	ands	r3, r2
 8000804:	2b04      	cmp	r3, #4
 8000806:	d100      	bne.n	800080a <__aeabi_ddiv+0x516>
 8000808:	e5e6      	b.n	80003d8 <__aeabi_ddiv+0xe4>
 800080a:	1d17      	adds	r7, r2, #4
 800080c:	4297      	cmp	r7, r2
 800080e:	4192      	sbcs	r2, r2
 8000810:	4253      	negs	r3, r2
 8000812:	449b      	add	fp, r3
 8000814:	08fa      	lsrs	r2, r7, #3
 8000816:	e5e0      	b.n	80003da <__aeabi_ddiv+0xe6>
 8000818:	2800      	cmp	r0, #0
 800081a:	d100      	bne.n	800081e <__aeabi_ddiv+0x52a>
 800081c:	e5d7      	b.n	80003ce <__aeabi_ddiv+0xda>
 800081e:	1871      	adds	r1, r6, r1
 8000820:	1e53      	subs	r3, r2, #1
 8000822:	42b1      	cmp	r1, r6
 8000824:	d327      	bcc.n	8000876 <__aeabi_ddiv+0x582>
 8000826:	42a9      	cmp	r1, r5
 8000828:	d315      	bcc.n	8000856 <__aeabi_ddiv+0x562>
 800082a:	d058      	beq.n	80008de <__aeabi_ddiv+0x5ea>
 800082c:	001a      	movs	r2, r3
 800082e:	e773      	b.n	8000718 <__aeabi_ddiv+0x424>
 8000830:	2b00      	cmp	r3, #0
 8000832:	dc00      	bgt.n	8000836 <__aeabi_ddiv+0x542>
 8000834:	e604      	b.n	8000440 <__aeabi_ddiv+0x14c>
 8000836:	2301      	movs	r3, #1
 8000838:	2200      	movs	r2, #0
 800083a:	449b      	add	fp, r3
 800083c:	e5cd      	b.n	80003da <__aeabi_ddiv+0xe6>
 800083e:	2302      	movs	r3, #2
 8000840:	4447      	add	r7, r8
 8000842:	4547      	cmp	r7, r8
 8000844:	4189      	sbcs	r1, r1
 8000846:	425b      	negs	r3, r3
 8000848:	469c      	mov	ip, r3
 800084a:	4249      	negs	r1, r1
 800084c:	1989      	adds	r1, r1, r6
 800084e:	190c      	adds	r4, r1, r4
 8000850:	44e3      	add	fp, ip
 8000852:	1a24      	subs	r4, r4, r0
 8000854:	e703      	b.n	800065e <__aeabi_ddiv+0x36a>
 8000856:	4643      	mov	r3, r8
 8000858:	005f      	lsls	r7, r3, #1
 800085a:	4547      	cmp	r7, r8
 800085c:	419b      	sbcs	r3, r3
 800085e:	46b8      	mov	r8, r7
 8000860:	425b      	negs	r3, r3
 8000862:	199e      	adds	r6, r3, r6
 8000864:	3a02      	subs	r2, #2
 8000866:	1989      	adds	r1, r1, r6
 8000868:	42a9      	cmp	r1, r5
 800086a:	d000      	beq.n	800086e <__aeabi_ddiv+0x57a>
 800086c:	e754      	b.n	8000718 <__aeabi_ddiv+0x424>
 800086e:	4540      	cmp	r0, r8
 8000870:	d000      	beq.n	8000874 <__aeabi_ddiv+0x580>
 8000872:	e751      	b.n	8000718 <__aeabi_ddiv+0x424>
 8000874:	e5ab      	b.n	80003ce <__aeabi_ddiv+0xda>
 8000876:	001a      	movs	r2, r3
 8000878:	e7f6      	b.n	8000868 <__aeabi_ddiv+0x574>
 800087a:	211f      	movs	r1, #31
 800087c:	465f      	mov	r7, fp
 800087e:	4249      	negs	r1, r1
 8000880:	1b0c      	subs	r4, r1, r4
 8000882:	40e7      	lsrs	r7, r4
 8000884:	2b20      	cmp	r3, #32
 8000886:	d007      	beq.n	8000898 <__aeabi_ddiv+0x5a4>
 8000888:	491a      	ldr	r1, [pc, #104]	; (80008f4 <__aeabi_ddiv+0x600>)
 800088a:	9b00      	ldr	r3, [sp, #0]
 800088c:	468c      	mov	ip, r1
 800088e:	4463      	add	r3, ip
 8000890:	0018      	movs	r0, r3
 8000892:	465b      	mov	r3, fp
 8000894:	4083      	lsls	r3, r0
 8000896:	431a      	orrs	r2, r3
 8000898:	1e50      	subs	r0, r2, #1
 800089a:	4182      	sbcs	r2, r0
 800089c:	433a      	orrs	r2, r7
 800089e:	2707      	movs	r7, #7
 80008a0:	2300      	movs	r3, #0
 80008a2:	4017      	ands	r7, r2
 80008a4:	d009      	beq.n	80008ba <__aeabi_ddiv+0x5c6>
 80008a6:	210f      	movs	r1, #15
 80008a8:	2300      	movs	r3, #0
 80008aa:	4011      	ands	r1, r2
 80008ac:	0014      	movs	r4, r2
 80008ae:	2904      	cmp	r1, #4
 80008b0:	d195      	bne.n	80007de <__aeabi_ddiv+0x4ea>
 80008b2:	0022      	movs	r2, r4
 80008b4:	075f      	lsls	r7, r3, #29
 80008b6:	025b      	lsls	r3, r3, #9
 80008b8:	0b1b      	lsrs	r3, r3, #12
 80008ba:	08d2      	lsrs	r2, r2, #3
 80008bc:	4317      	orrs	r7, r2
 80008be:	2200      	movs	r2, #0
 80008c0:	e5a6      	b.n	8000410 <__aeabi_ddiv+0x11c>
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	4659      	mov	r1, fp
 80008c6:	031b      	lsls	r3, r3, #12
 80008c8:	430b      	orrs	r3, r1
 80008ca:	031b      	lsls	r3, r3, #12
 80008cc:	0017      	movs	r7, r2
 80008ce:	0b1b      	lsrs	r3, r3, #12
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <__aeabi_ddiv+0x5f8>)
 80008d2:	e59d      	b.n	8000410 <__aeabi_ddiv+0x11c>
 80008d4:	42bd      	cmp	r5, r7
 80008d6:	d8b2      	bhi.n	800083e <__aeabi_ddiv+0x54a>
 80008d8:	469b      	mov	fp, r3
 80008da:	2400      	movs	r4, #0
 80008dc:	e6bf      	b.n	800065e <__aeabi_ddiv+0x36a>
 80008de:	4580      	cmp	r8, r0
 80008e0:	d3b9      	bcc.n	8000856 <__aeabi_ddiv+0x562>
 80008e2:	001a      	movs	r2, r3
 80008e4:	e7c3      	b.n	800086e <__aeabi_ddiv+0x57a>
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	000003ff 	.word	0x000003ff
 80008ec:	000007ff 	.word	0x000007ff
 80008f0:	0000041e 	.word	0x0000041e
 80008f4:	0000043e 	.word	0x0000043e

080008f8 <__aeabi_i2d>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d02d      	beq.n	800095a <__aeabi_i2d+0x62>
 80008fe:	17c3      	asrs	r3, r0, #31
 8000900:	18c5      	adds	r5, r0, r3
 8000902:	405d      	eors	r5, r3
 8000904:	0fc4      	lsrs	r4, r0, #31
 8000906:	0028      	movs	r0, r5
 8000908:	f000 f8b4 	bl	8000a74 <__clzsi2>
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <__aeabi_i2d+0x6c>)
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	055b      	lsls	r3, r3, #21
 8000912:	0d5b      	lsrs	r3, r3, #21
 8000914:	280a      	cmp	r0, #10
 8000916:	dd15      	ble.n	8000944 <__aeabi_i2d+0x4c>
 8000918:	380b      	subs	r0, #11
 800091a:	4085      	lsls	r5, r0
 800091c:	2200      	movs	r2, #0
 800091e:	032d      	lsls	r5, r5, #12
 8000920:	0b2d      	lsrs	r5, r5, #12
 8000922:	2100      	movs	r1, #0
 8000924:	0010      	movs	r0, r2
 8000926:	032d      	lsls	r5, r5, #12
 8000928:	0d0a      	lsrs	r2, r1, #20
 800092a:	0b2d      	lsrs	r5, r5, #12
 800092c:	0512      	lsls	r2, r2, #20
 800092e:	432a      	orrs	r2, r5
 8000930:	4d0d      	ldr	r5, [pc, #52]	; (8000968 <__aeabi_i2d+0x70>)
 8000932:	051b      	lsls	r3, r3, #20
 8000934:	402a      	ands	r2, r5
 8000936:	4313      	orrs	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	07e4      	lsls	r4, r4, #31
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	4323      	orrs	r3, r4
 8000940:	0019      	movs	r1, r3
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	0002      	movs	r2, r0
 8000946:	0029      	movs	r1, r5
 8000948:	3215      	adds	r2, #21
 800094a:	4091      	lsls	r1, r2
 800094c:	000a      	movs	r2, r1
 800094e:	210b      	movs	r1, #11
 8000950:	1a08      	subs	r0, r1, r0
 8000952:	40c5      	lsrs	r5, r0
 8000954:	032d      	lsls	r5, r5, #12
 8000956:	0b2d      	lsrs	r5, r5, #12
 8000958:	e7e3      	b.n	8000922 <__aeabi_i2d+0x2a>
 800095a:	2400      	movs	r4, #0
 800095c:	2300      	movs	r3, #0
 800095e:	2500      	movs	r5, #0
 8000960:	2200      	movs	r2, #0
 8000962:	e7de      	b.n	8000922 <__aeabi_i2d+0x2a>
 8000964:	0000041e 	.word	0x0000041e
 8000968:	800fffff 	.word	0x800fffff

0800096c <__aeabi_d2f>:
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	004c      	lsls	r4, r1, #1
 8000970:	0d64      	lsrs	r4, r4, #21
 8000972:	030b      	lsls	r3, r1, #12
 8000974:	1c62      	adds	r2, r4, #1
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	0f46      	lsrs	r6, r0, #29
 800097a:	0552      	lsls	r2, r2, #21
 800097c:	0fc9      	lsrs	r1, r1, #31
 800097e:	431e      	orrs	r6, r3
 8000980:	00c5      	lsls	r5, r0, #3
 8000982:	0d52      	lsrs	r2, r2, #21
 8000984:	2a01      	cmp	r2, #1
 8000986:	dd29      	ble.n	80009dc <__aeabi_d2f+0x70>
 8000988:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <__aeabi_d2f+0xfc>)
 800098a:	18e7      	adds	r7, r4, r3
 800098c:	2ffe      	cmp	r7, #254	; 0xfe
 800098e:	dc1c      	bgt.n	80009ca <__aeabi_d2f+0x5e>
 8000990:	2f00      	cmp	r7, #0
 8000992:	dd3b      	ble.n	8000a0c <__aeabi_d2f+0xa0>
 8000994:	0180      	lsls	r0, r0, #6
 8000996:	1e43      	subs	r3, r0, #1
 8000998:	4198      	sbcs	r0, r3
 800099a:	2207      	movs	r2, #7
 800099c:	00f3      	lsls	r3, r6, #3
 800099e:	0f6d      	lsrs	r5, r5, #29
 80009a0:	4303      	orrs	r3, r0
 80009a2:	432b      	orrs	r3, r5
 80009a4:	401a      	ands	r2, r3
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d004      	beq.n	80009b4 <__aeabi_d2f+0x48>
 80009aa:	220f      	movs	r2, #15
 80009ac:	401a      	ands	r2, r3
 80009ae:	2a04      	cmp	r2, #4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_d2f+0x48>
 80009b2:	3304      	adds	r3, #4
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	04d2      	lsls	r2, r2, #19
 80009b8:	401a      	ands	r2, r3
 80009ba:	d024      	beq.n	8000a06 <__aeabi_d2f+0x9a>
 80009bc:	3701      	adds	r7, #1
 80009be:	b2fa      	uxtb	r2, r7
 80009c0:	2fff      	cmp	r7, #255	; 0xff
 80009c2:	d002      	beq.n	80009ca <__aeabi_d2f+0x5e>
 80009c4:	019b      	lsls	r3, r3, #6
 80009c6:	0a58      	lsrs	r0, r3, #9
 80009c8:	e001      	b.n	80009ce <__aeabi_d2f+0x62>
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	2000      	movs	r0, #0
 80009ce:	0240      	lsls	r0, r0, #9
 80009d0:	05d2      	lsls	r2, r2, #23
 80009d2:	0a40      	lsrs	r0, r0, #9
 80009d4:	07c9      	lsls	r1, r1, #31
 80009d6:	4310      	orrs	r0, r2
 80009d8:	4308      	orrs	r0, r1
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009dc:	4335      	orrs	r5, r6
 80009de:	2c00      	cmp	r4, #0
 80009e0:	d104      	bne.n	80009ec <__aeabi_d2f+0x80>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d10a      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009e6:	2200      	movs	r2, #0
 80009e8:	2000      	movs	r0, #0
 80009ea:	e7f0      	b.n	80009ce <__aeabi_d2f+0x62>
 80009ec:	2d00      	cmp	r5, #0
 80009ee:	d0ec      	beq.n	80009ca <__aeabi_d2f+0x5e>
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	03c0      	lsls	r0, r0, #15
 80009f4:	4330      	orrs	r0, r6
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	e7e9      	b.n	80009ce <__aeabi_d2f+0x62>
 80009fa:	2400      	movs	r4, #0
 80009fc:	2300      	movs	r3, #0
 80009fe:	025b      	lsls	r3, r3, #9
 8000a00:	0a58      	lsrs	r0, r3, #9
 8000a02:	b2e2      	uxtb	r2, r4
 8000a04:	e7e3      	b.n	80009ce <__aeabi_d2f+0x62>
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	003c      	movs	r4, r7
 8000a0a:	e7f8      	b.n	80009fe <__aeabi_d2f+0x92>
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	3317      	adds	r3, #23
 8000a10:	dbf3      	blt.n	80009fa <__aeabi_d2f+0x8e>
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	041b      	lsls	r3, r3, #16
 8000a16:	4333      	orrs	r3, r6
 8000a18:	261e      	movs	r6, #30
 8000a1a:	1bf6      	subs	r6, r6, r7
 8000a1c:	2e1f      	cmp	r6, #31
 8000a1e:	dd14      	ble.n	8000a4a <__aeabi_d2f+0xde>
 8000a20:	2202      	movs	r2, #2
 8000a22:	4252      	negs	r2, r2
 8000a24:	1bd7      	subs	r7, r2, r7
 8000a26:	001a      	movs	r2, r3
 8000a28:	40fa      	lsrs	r2, r7
 8000a2a:	0017      	movs	r7, r2
 8000a2c:	2e20      	cmp	r6, #32
 8000a2e:	d004      	beq.n	8000a3a <__aeabi_d2f+0xce>
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <__aeabi_d2f+0x100>)
 8000a32:	4694      	mov	ip, r2
 8000a34:	4464      	add	r4, ip
 8000a36:	40a3      	lsls	r3, r4
 8000a38:	431d      	orrs	r5, r3
 8000a3a:	002b      	movs	r3, r5
 8000a3c:	1e5d      	subs	r5, r3, #1
 8000a3e:	41ab      	sbcs	r3, r5
 8000a40:	2207      	movs	r2, #7
 8000a42:	433b      	orrs	r3, r7
 8000a44:	401a      	ands	r2, r3
 8000a46:	2700      	movs	r7, #0
 8000a48:	e7ad      	b.n	80009a6 <__aeabi_d2f+0x3a>
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <__aeabi_d2f+0x104>)
 8000a4c:	0028      	movs	r0, r5
 8000a4e:	18a2      	adds	r2, r4, r2
 8000a50:	4095      	lsls	r5, r2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	1e6c      	subs	r4, r5, #1
 8000a56:	41a5      	sbcs	r5, r4
 8000a58:	40f0      	lsrs	r0, r6
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	432b      	orrs	r3, r5
 8000a5e:	4303      	orrs	r3, r0
 8000a60:	401a      	ands	r2, r3
 8000a62:	2700      	movs	r7, #0
 8000a64:	e79f      	b.n	80009a6 <__aeabi_d2f+0x3a>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	fffffc80 	.word	0xfffffc80
 8000a6c:	fffffca2 	.word	0xfffffca2
 8000a70:	fffffc82 	.word	0xfffffc82

08000a74 <__clzsi2>:
 8000a74:	211c      	movs	r1, #28
 8000a76:	2301      	movs	r3, #1
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d301      	bcc.n	8000a82 <__clzsi2+0xe>
 8000a7e:	0c00      	lsrs	r0, r0, #16
 8000a80:	3910      	subs	r1, #16
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	4298      	cmp	r0, r3
 8000a86:	d301      	bcc.n	8000a8c <__clzsi2+0x18>
 8000a88:	0a00      	lsrs	r0, r0, #8
 8000a8a:	3908      	subs	r1, #8
 8000a8c:	091b      	lsrs	r3, r3, #4
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d301      	bcc.n	8000a96 <__clzsi2+0x22>
 8000a92:	0900      	lsrs	r0, r0, #4
 8000a94:	3904      	subs	r1, #4
 8000a96:	a202      	add	r2, pc, #8	; (adr r2, 8000aa0 <__clzsi2+0x2c>)
 8000a98:	5c10      	ldrb	r0, [r2, r0]
 8000a9a:	1840      	adds	r0, r0, r1
 8000a9c:	4770      	bx	lr
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	02020304 	.word	0x02020304
 8000aa4:	01010101 	.word	0x01010101
	...

08000ab0 <Max31855_Read_Temp>:

uint8_t Error=0;                                      // Thermocouple Connection acknowledge Flag
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
// ------------------- Functions ----------------
float Max31855_Read_Temp(void){
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
int Temp=0;                                           // Temperature Variable
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000aba:	2390      	movs	r3, #144	; 0x90
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 ff04 	bl	80018d0 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
 8000ac8:	23fa      	movs	r3, #250	; 0xfa
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4935      	ldr	r1, [pc, #212]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000ace:	4836      	ldr	r0, [pc, #216]	; (8000ba8 <Max31855_Read_Temp+0xf8>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	f001 fc21 	bl	8002318 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 8000ad6:	2390      	movs	r3, #144	; 0x90
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	2201      	movs	r2, #1
 8000adc:	2110      	movs	r1, #16
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fef6 	bl	80018d0 <HAL_GPIO_WritePin>
Error=DATARX[3]&0x07;								  // Error Detection
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000ae6:	78db      	ldrb	r3, [r3, #3]
 8000ae8:	2207      	movs	r2, #7
 8000aea:	4013      	ands	r3, r2
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <Max31855_Read_Temp+0xfc>)
 8000af0:	701a      	strb	r2, [r3, #0]
sign=(DATARX[0]&(0x80))>>7;							  // Sign Bit calculation
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	09db      	lsrs	r3, r3, #7
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	001a      	movs	r2, r3
 8000afc:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <Max31855_Read_Temp+0x100>)
 8000afe:	601a      	str	r2, [r3, #0]

if(DATARX[3] & 0x07)								  // Returns Error Number
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000b02:	78db      	ldrb	r3, [r3, #3]
 8000b04:	001a      	movs	r2, r3
 8000b06:	2307      	movs	r3, #7
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d00a      	beq.n	8000b22 <Max31855_Read_Temp+0x72>
return(-1*(DATARX[3] & 0x07));
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	001a      	movs	r2, r3
 8000b12:	2307      	movs	r3, #7
 8000b14:	4013      	ands	r3, r2
 8000b16:	425b      	negs	r3, r3
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff fba1 	bl	8000260 <__aeabi_i2f>
 8000b1e:	1c03      	adds	r3, r0, #0
 8000b20:	e03c      	b.n	8000b9c <Max31855_Read_Temp+0xec>

else if(sign==1){									  // Negative Temperature
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <Max31855_Read_Temp+0x100>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d121      	bne.n	8000b6e <Max31855_Read_Temp+0xbe>
Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	019b      	lsls	r3, r3, #6
 8000b30:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000b32:	7852      	ldrb	r2, [r2, #1]
 8000b34:	0892      	lsrs	r2, r2, #2
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
Temp&=0b01111111111111;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	04db      	lsls	r3, r3, #19
 8000b40:	0cdb      	lsrs	r3, r3, #19
 8000b42:	607b      	str	r3, [r7, #4]
Temp^=0b01111111111111;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <Max31855_Read_Temp+0x104>)
 8000b48:	4053      	eors	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
return((double)-Temp/4);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	425b      	negs	r3, r3
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fed1 	bl	80008f8 <__aeabi_i2d>
 8000b56:	2200      	movs	r2, #0
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <Max31855_Read_Temp+0x108>)
 8000b5a:	f7ff fbcb 	bl	80002f4 <__aeabi_ddiv>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	000c      	movs	r4, r1
 8000b62:	0018      	movs	r0, r3
 8000b64:	0021      	movs	r1, r4
 8000b66:	f7ff ff01 	bl	800096c <__aeabi_d2f>
 8000b6a:	1c03      	adds	r3, r0, #0
 8000b6c:	e016      	b.n	8000b9c <Max31855_Read_Temp+0xec>
	}

else												  // Positive Temperature
{
		Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	019b      	lsls	r3, r3, #6
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <Max31855_Read_Temp+0xf4>)
 8000b76:	7852      	ldrb	r2, [r2, #1]
 8000b78:	0892      	lsrs	r2, r2, #2
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	607b      	str	r3, [r7, #4]
		return((double)Temp / 4);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff feb9 	bl	80008f8 <__aeabi_i2d>
 8000b86:	2200      	movs	r2, #0
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <Max31855_Read_Temp+0x108>)
 8000b8a:	f7ff fbb3 	bl	80002f4 <__aeabi_ddiv>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	000c      	movs	r4, r1
 8000b92:	0018      	movs	r0, r3
 8000b94:	0021      	movs	r1, r4
 8000b96:	f7ff fee9 	bl	800096c <__aeabi_d2f>
 8000b9a:	1c03      	adds	r3, r0, #0
}
}
 8000b9c:	1c18      	adds	r0, r3, #0
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b003      	add	sp, #12
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	200000a8 	.word	0x200000a8
 8000ba8:	200000ac 	.word	0x200000ac
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	20000090 	.word	0x20000090
 8000bb4:	00001fff 	.word	0x00001fff
 8000bb8:	40100000 	.word	0x40100000

08000bbc <Delay_us>:
// ------------------------ Command & Data Write functions --------------------------
static void Command(uint8_t cmd);                   // 8Bit Data Transfer in command Mode
static void Command4Bit(uint8_t cmd);               // 2*4Bit Data Transfer in command Mode
static void lcd_write_data(uint8_t data);           // Data transfer in Non-command Mode
void Delay_us(uint32_t us)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	us=us*50;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2232      	movs	r2, #50	; 0x32
 8000bc8:	4353      	muls	r3, r2
 8000bca:	607b      	str	r3, [r7, #4]
	for(uint32_t i=0;i<us;i++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e003      	b.n	8000bda <Delay_us+0x1e>
	{
		__ASM("NOP");
 8000bd2:	46c0      	nop			; (mov r8, r8)
	for(uint32_t i=0;i<us;i++)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d3f7      	bcc.n	8000bd2 <Delay_us+0x16>
	}
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <lcd_Init>:
#define LCD_CURSOR_ON     0x0E                       // Cursor On Command Address
#define LCD_CURSOR_OFF    0x0C                       // Cursor Off Command Address
#define LCD_2LINE         0x08                       // Address for More Than 2 Line LCDs (For Example 4*20)
// ------------------------- Initializing Function for LCD ----------------------------
void lcd_Init(void)
{	
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
	uint8_t FuncCnTrL=0;                             // Tuning Variable
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 fc24 	bl	8001444 <HAL_Delay>
	lcd_gotoxy(0,0);                                 // Sets Cursor on 0,0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f93a 	bl	8000e78 <lcd_gotoxy>
    if (LCD_ROWS > 1){FuncCnTrL|=LCD_2LINE;}         // Changing Address if --> LCD Rows>2 Line
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
    Command4Bit(0x03);                               // Starts Commands to set LCD in 4Bit Interface
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f8e5 	bl	8000de0 <Command4Bit>
	HAL_Delay(5);
 8000c16:	2005      	movs	r0, #5
 8000c18:	f000 fc14 	bl	8001444 <HAL_Delay>
	Command4Bit(0x03);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f8df 	bl	8000de0 <Command4Bit>
	HAL_Delay(5);
 8000c22:	2005      	movs	r0, #5
 8000c24:	f000 fc0e 	bl	8001444 <HAL_Delay>
	Command4Bit(0x03);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f8d9 	bl	8000de0 <Command4Bit>
	HAL_Delay(5);
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 fc08 	bl	8001444 <HAL_Delay>
	Command4Bit(0x02);
 8000c34:	2002      	movs	r0, #2
 8000c36:	f000 f8d3 	bl	8000de0 <Command4Bit>
	HAL_Delay(5);
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f000 fc02 	bl	8001444 <HAL_Delay>
// ----------- Turns Displays on - No Cursor - No Blinking - Position 0,0 - Default Font
	Command(0x20 | FuncCnTrL);
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2220      	movs	r2, #32
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 f884 	bl	8000d58 <Command>
    Command(0x08|0x04);
 8000c50:	200c      	movs	r0, #12
 8000c52:	f000 f881 	bl	8000d58 <Command>
    lcd_clrscr();
 8000c56:	f000 f80a 	bl	8000c6e <lcd_clrscr>
	Command(0x04 | 0x02);
 8000c5a:	2006      	movs	r0, #6
 8000c5c:	f000 f87c 	bl	8000d58 <Command>
	HAL_Delay(5);
 8000c60:	2005      	movs	r0, #5
 8000c62:	f000 fbef 	bl	8001444 <HAL_Delay>
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <lcd_clrscr>:
// --------------------------------- Screen Clear Function -------------------------------
void lcd_clrscr(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
	Command(LCD_CLR);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 f870 	bl	8000d58 <Command>
	HAL_Delay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fbe3 	bl	8001444 <HAL_Delay>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <lcd_puts>:
// ----------------------------------- Puts String on LCD ---------------------------------
void lcd_puts(char * str){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
while (*str)
 8000c8c:	e03d      	b.n	8000d0a <lcd_puts+0x86>
	  {
			if (Xcurrent >= LCD_COLS)
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <lcd_puts+0x98>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b13      	cmp	r3, #19
 8000c94:	d90d      	bls.n	8000cb2 <lcd_puts+0x2e>
	    {
				Xcurrent = 0;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <lcd_puts+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
				Ycurrent=0;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <lcd_puts+0x9c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
				lcd_gotoxy(Xcurrent, Ycurrent);
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <lcd_puts+0x98>)
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <lcd_puts+0x9c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0019      	movs	r1, r3
 8000cac:	0010      	movs	r0, r2
 8000cae:	f000 f8e3 	bl	8000e78 <lcd_gotoxy>
			}
			if (*str == '\n')
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b0a      	cmp	r3, #10
 8000cb8:	d10e      	bne.n	8000cd8 <lcd_puts+0x54>
	    {
				Ycurrent++;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <lcd_puts+0x9c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <lcd_puts+0x9c>)
 8000cc4:	701a      	strb	r2, [r3, #0]
				lcd_gotoxy(Xcurrent, Ycurrent);
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <lcd_puts+0x98>)
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <lcd_puts+0x9c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0019      	movs	r1, r3
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	f000 f8d1 	bl	8000e78 <lcd_gotoxy>
 8000cd6:	e015      	b.n	8000d04 <lcd_puts+0x80>
			}
	    else if (*str == '\r')
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b0d      	cmp	r3, #13
 8000cde:	d106      	bne.n	8000cee <lcd_puts+0x6a>
	    {
	    	lcd_gotoxy(0, Ycurrent);
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <lcd_puts+0x9c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f8c6 	bl	8000e78 <lcd_gotoxy>
 8000cec:	e00a      	b.n	8000d04 <lcd_puts+0x80>
			}
	    else
	    {
				lcd_write_data(*str);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f852 	bl	8000d9c <lcd_write_data>
				Xcurrent++;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <lcd_puts+0x98>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <lcd_puts+0x98>)
 8000d02:	701a      	strb	r2, [r3, #0]
			}
			str++;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
while (*str)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1bd      	bne.n	8000c8e <lcd_puts+0xa>
		}
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000094 	.word	0x20000094
 8000d20:	20000095 	.word	0x20000095

08000d24 <lcd_pos_puts>:
// --------------------------------- Puts String on X,Y Position ---------------------------------
void lcd_pos_puts(uint8_t x, uint8_t y, char* str)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	603a      	str	r2, [r7, #0]
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	1c02      	adds	r2, r0, #0
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	1dbb      	adds	r3, r7, #6
 8000d34:	1c0a      	adds	r2, r1, #0
 8000d36:	701a      	strb	r2, [r3, #0]
lcd_gotoxy(x, y);
 8000d38:	1dbb      	adds	r3, r7, #6
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f898 	bl	8000e78 <lcd_gotoxy>
lcd_puts(str);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff9a 	bl	8000c84 <lcd_puts>
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <Command>:
{
Command(LCD_CURSOR_OFF);
}
// ----------------------------------- Command Data Transfer Function ---------------------------------
static void Command(uint8_t cmd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	701a      	strb	r2, [r3, #0]
LCD_RS_LOW;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <Command+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	2102      	movs	r1, #2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 fdb0 	bl	80018d0 <HAL_GPIO_WritePin>
Command4Bit(cmd >> 4);
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	091b      	lsrs	r3, r3, #4
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f831 	bl	8000de0 <Command4Bit>
Command4Bit(cmd & 0x0F);
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	220f      	movs	r2, #15
 8000d84:	4013      	ands	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 f829 	bl	8000de0 <Command4Bit>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	48000400 	.word	0x48000400

08000d9c <lcd_write_data>:
// ----------------------------------------- Sends RAW DATA to LCD ------------------------------------
static void lcd_write_data(uint8_t data)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	701a      	strb	r2, [r3, #0]
LCD_RS_HIGH;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <lcd_write_data+0x40>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	2102      	movs	r1, #2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fd8e 	bl	80018d0 <HAL_GPIO_WritePin>
Command4Bit(data >> 4);
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 f80f 	bl	8000de0 <Command4Bit>
Command4Bit(data & 0x0F);
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	4013      	ands	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 f807 	bl	8000de0 <Command4Bit>
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	48000400 	.word	0x48000400

08000de0 <Command4Bit>:
// -------------------------------- Command Data Transfer Function(4Bit Mode) -------------------------
static void Command4Bit(uint8_t cmd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0002      	movs	r2, r0
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(LCD_DATA7_PORT, LCD_DATA7_PIN, (GPIO_PinState)(cmd & 0x08));
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2208      	movs	r2, #8
 8000df2:	4013      	ands	r3, r2
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	2390      	movs	r3, #144	; 0x90
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 fd67 	bl	80018d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DATA6_PORT, LCD_DATA6_PIN, (GPIO_PinState)(cmd & 0x04));
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2204      	movs	r2, #4
 8000e08:	4013      	ands	r3, r2
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	2390      	movs	r3, #144	; 0x90
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	2104      	movs	r1, #4
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 fd5c 	bl	80018d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DATA5_PORT, LCD_DATA5_PIN, (GPIO_PinState)(cmd & 0x02));
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	2390      	movs	r3, #144	; 0x90
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	2102      	movs	r1, #2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fd51 	bl	80018d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DATA4_PORT, LCD_DATA4_PIN, (GPIO_PinState)(cmd & 0x01));
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	2390      	movs	r3, #144	; 0x90
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fd46 	bl	80018d0 <HAL_GPIO_WritePin>
LCD_E_BLINK;
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	00d9      	lsls	r1, r3, #3
 8000e48:	2390      	movs	r3, #144	; 0x90
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 fd3e 	bl	80018d0 <HAL_GPIO_WritePin>
 8000e54:	200f      	movs	r0, #15
 8000e56:	f7ff feb1 	bl	8000bbc <Delay_us>
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	00d9      	lsls	r1, r3, #3
 8000e5e:	2390      	movs	r3, #144	; 0x90
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2200      	movs	r2, #0
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fd33 	bl	80018d0 <HAL_GPIO_WritePin>
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f7ff fea6 	bl	8000bbc <Delay_us>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <lcd_gotoxy>:
// ------------------------------------ Cursor Position set Function ----------------------------------
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	0002      	movs	r2, r0
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	1c0a      	adds	r2, r1, #0
 8000e88:	701a      	strb	r2, [r3, #0]
uint8_t row_addr[] = {0x00, 0x40, 0x14, 0x54}; // Addresses for First Character on each line
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <lcd_gotoxy+0x68>)
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	601a      	str	r2, [r3, #0]
if (y >= LCD_ROWS)
 8000e94:	1dbb      	adds	r3, r7, #6
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d902      	bls.n	8000ea2 <lcd_gotoxy+0x2a>
y = 0;
 8000e9c:	1dbb      	adds	r3, r7, #6
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
Xcurrent = x;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <lcd_gotoxy+0x6c>)
 8000ea4:	1dfa      	adds	r2, r7, #7
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
Ycurrent = y;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <lcd_gotoxy+0x70>)
 8000eac:	1dba      	adds	r2, r7, #6
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	701a      	strb	r2, [r3, #0]
Command(0x80 | (x + row_addr[y]));
 8000eb2:	1dbb      	adds	r3, r7, #6
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	5cd2      	ldrb	r2, [r2, r3]
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	4252      	negs	r2, r2
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ff41 	bl	8000d58 <Command>
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	08003574 	.word	0x08003574
 8000ee4:	20000094 	.word	0x20000094
 8000ee8:	20000095 	.word	0x20000095

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f000 fa44 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f858 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 f8d4 	bl	80010a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000efc:	f000 f894 	bl	8001028 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lcd_Init();
 8000f00:	f7ff fe73 	bl	8000bea <lcd_Init>
 	  lcd_clrscr();
 8000f04:	f7ff feb3 	bl	8000c6e <lcd_clrscr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

temp=Max31855_Read_Temp(); 			// Gets Temperature from MAX31855
 8000f08:	f7ff fdd2 	bl	8000ab0 <Max31855_Read_Temp>
 8000f0c:	1c02      	adds	r2, r0, #0
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <main+0x9c>)
 8000f10:	601a      	str	r2, [r3, #0]
sprintf(lcd,"T=%3d",(int)temp);		// Conversation to Char
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <main+0x9c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1c18      	adds	r0, r3, #0
 8000f18:	f7ff f982 	bl	8000220 <__aeabi_f2iz>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	491b      	ldr	r1, [pc, #108]	; (8000f8c <main+0xa0>)
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <main+0xa4>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f001 ff12 	bl	8002d4c <siprintf>
lcd_pos_puts(0, 0, lcd); 			// LCD Show
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <main+0xa4>)
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fef8 	bl	8000d24 <lcd_pos_puts>
switch(Error){
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <main+0xa8>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00f      	beq.n	8000f5c <main+0x70>
 8000f3c:	dc02      	bgt.n	8000f44 <main+0x58>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <main+0x62>
	break;
case 4:
	lcd_pos_puts(0, 1,"SHORT TO VCC    ");
	break;
default:
	break;
 8000f42:	e020      	b.n	8000f86 <main+0x9a>
switch(Error){
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d010      	beq.n	8000f6a <main+0x7e>
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d015      	beq.n	8000f78 <main+0x8c>
	break;
 8000f4c:	e01b      	b.n	8000f86 <main+0x9a>
	lcd_pos_puts(0, 1,"NORMAL          ");
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <main+0xac>)
 8000f50:	001a      	movs	r2, r3
 8000f52:	2101      	movs	r1, #1
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fee5 	bl	8000d24 <lcd_pos_puts>
	break;
 8000f5a:	e014      	b.n	8000f86 <main+0x9a>
	lcd_pos_puts(0, 1,"OPEN CONNECTION ");
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <main+0xb0>)
 8000f5e:	001a      	movs	r2, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fede 	bl	8000d24 <lcd_pos_puts>
	break;
 8000f68:	e00d      	b.n	8000f86 <main+0x9a>
	lcd_pos_puts(0, 1,"SHORT TO GND    ");
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <main+0xb4>)
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fed7 	bl	8000d24 <lcd_pos_puts>
	break;
 8000f76:	e006      	b.n	8000f86 <main+0x9a>
	lcd_pos_puts(0, 1,"SHORT TO VCC    ");
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <main+0xb8>)
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fed0 	bl	8000d24 <lcd_pos_puts>
	break;
 8000f84:	46c0      	nop			; (mov r8, r8)
temp=Max31855_Read_Temp(); 			// Gets Temperature from MAX31855
 8000f86:	e7bf      	b.n	8000f08 <main+0x1c>
 8000f88:	20000098 	.word	0x20000098
 8000f8c:	08003578 	.word	0x08003578
 8000f90:	20000110 	.word	0x20000110
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	08003580 	.word	0x08003580
 8000f9c:	08003594 	.word	0x08003594
 8000fa0:	080035a8 	.word	0x080035a8
 8000fa4:	080035bc 	.word	0x080035bc

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b091      	sub	sp, #68	; 0x44
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	2410      	movs	r4, #16
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2330      	movs	r3, #48	; 0x30
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f001 febf 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f001 feb8 	bl	8002d3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	0021      	movs	r1, r4
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2210      	movs	r2, #16
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f000 fc8f 	bl	800190c <HAL_RCC_OscConfig>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000ff2:	f000 f8d1 	bl	8001198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	003b      	movs	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001008:	003b      	movs	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800100e:	003b      	movs	r3, r7
 8001010:	2100      	movs	r1, #0
 8001012:	0018      	movs	r0, r3
 8001014:	f000 ff96 	bl	8001f44 <HAL_RCC_ClockConfig>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800101c:	f000 f8bc 	bl	8001198 <Error_Handler>
  }
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b011      	add	sp, #68	; 0x44
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_SPI1_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_SPI1_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_SPI1_Init+0x74>)
 8001034:	2282      	movs	r2, #130	; 0x82
 8001036:	0052      	lsls	r2, r2, #1
 8001038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_SPI1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_SPI1_Init+0x74>)
 8001042:	22e0      	movs	r2, #224	; 0xe0
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_SPI1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_SPI1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_SPI1_Init+0x74>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SPI1_Init+0x74>)
 800105e:	2228      	movs	r2, #40	; 0x28
 8001060:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_SPI1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_SPI1_Init+0x74>)
 8001076:	2207      	movs	r2, #7
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_SPI1_Init+0x74>)
 8001082:	2208      	movs	r2, #8
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <MX_SPI1_Init+0x74>)
 8001088:	0018      	movs	r0, r3
 800108a:	f001 f88d 	bl	80021a8 <HAL_SPI_Init>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d001      	beq.n	8001096 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 f881 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000ac 	.word	0x200000ac
 80010a0:	40013000 	.word	0x40013000

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	240c      	movs	r4, #12
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	0018      	movs	r0, r3
 80010b0:	2314      	movs	r3, #20
 80010b2:	001a      	movs	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	f001 fe41 	bl	8002d3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <MX_GPIO_Init+0xe4>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <MX_GPIO_Init+0xe4>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0289      	lsls	r1, r1, #10
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <MX_GPIO_Init+0xe4>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_GPIO_Init+0xe4>)
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_GPIO_Init+0xe4>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	02c9      	lsls	r1, r1, #11
 80010e0:	430a      	orrs	r2, r1
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_GPIO_Init+0xe4>)
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	02db      	lsls	r3, r3, #11
 80010ec:	4013      	ands	r3, r2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010f2:	4926      	ldr	r1, [pc, #152]	; (800118c <MX_GPIO_Init+0xe8>)
 80010f4:	2390      	movs	r3, #144	; 0x90
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	2200      	movs	r2, #0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fbe8 	bl	80018d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <MX_GPIO_Init+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	2102      	movs	r1, #2
 8001106:	0018      	movs	r0, r3
 8001108:	f000 fbe2 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800110c:	193b      	adds	r3, r7, r4
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <MX_GPIO_Init+0xf0>)
 8001110:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2201      	movs	r2, #1
 8001116:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	193a      	adds	r2, r7, r4
 8001126:	2390      	movs	r3, #144	; 0x90
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f000 fa5f 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2210      	movs	r2, #16
 8001136:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2201      	movs	r2, #1
 800113c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2201      	movs	r2, #1
 8001142:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	193a      	adds	r2, r7, r4
 800114c:	2390      	movs	r3, #144	; 0x90
 800114e:	05db      	lsls	r3, r3, #23
 8001150:	0011      	movs	r1, r2
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fa4c 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001158:	0021      	movs	r1, r4
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2202      	movs	r2, #2
 800115e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2201      	movs	r2, #1
 8001164:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	187b      	adds	r3, r7, r1
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <MX_GPIO_Init+0xec>)
 8001176:	0019      	movs	r1, r3
 8001178:	0010      	movs	r0, r2
 800117a:	f000 fa39 	bl	80015f0 <HAL_GPIO_Init>

}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b009      	add	sp, #36	; 0x24
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	40021000 	.word	0x40021000
 800118c:	0000061f 	.word	0x0000061f
 8001190:	48000400 	.word	0x48000400
 8001194:	0000060f 	.word	0x0000060f

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119e:	e7fe      	b.n	800119e <Error_Handler+0x6>

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x44>)
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_MspInit+0x44>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	430a      	orrs	r2, r1
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_MspInit+0x44>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4013      	ands	r3, r2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_MspInit+0x44>)
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_MspInit+0x44>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0549      	lsls	r1, r1, #21
 80011c8:	430a      	orrs	r2, r1
 80011ca:	61da      	str	r2, [r3, #28]
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_MspInit+0x44>)
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	4013      	ands	r3, r2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	2314      	movs	r3, #20
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	0018      	movs	r0, r3
 80011f6:	2314      	movs	r3, #20
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f001 fd9e 	bl	8002d3c <memset>
  if(hspi->Instance==SPI1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <HAL_SPI_MspInit+0x90>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d132      	bne.n	8001270 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_SPI_MspInit+0x94>)
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_SPI_MspInit+0x94>)
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	0149      	lsls	r1, r1, #5
 8001214:	430a      	orrs	r2, r1
 8001216:	619a      	str	r2, [r3, #24]
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_SPI_MspInit+0x94>)
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_SPI_MspInit+0x94>)
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_SPI_MspInit+0x94>)
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	0289      	lsls	r1, r1, #10
 8001230:	430a      	orrs	r2, r1
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_SPI_MspInit+0x94>)
 8001236:	695a      	ldr	r2, [r3, #20]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	029b      	lsls	r3, r3, #10
 800123c:	4013      	ands	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001242:	2114      	movs	r1, #20
 8001244:	187b      	adds	r3, r7, r1
 8001246:	22e0      	movs	r2, #224	; 0xe0
 8001248:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2202      	movs	r2, #2
 800124e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	187b      	adds	r3, r7, r1
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2203      	movs	r2, #3
 800125a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	187a      	adds	r2, r7, r1
 8001264:	2390      	movs	r3, #144	; 0x90
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	0011      	movs	r1, r2
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f9c0 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b00a      	add	sp, #40	; 0x28
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40013000 	.word	0x40013000
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a4:	f000 f8b2 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	18d3      	adds	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f001 fd02 	bl	8002ce8 <__errno>
 80012e4:	0003      	movs	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	425b      	negs	r3, r3
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	18d2      	adds	r2, r2, r3
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <_sbrk+0x64>)
 8001300:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b006      	add	sp, #24
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20001000 	.word	0x20001000
 8001310:	00000400 	.word	0x00000400
 8001314:	2000009c 	.word	0x2000009c
 8001318:	20000128 	.word	0x20000128

0800131c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490e      	ldr	r1, [pc, #56]	; (8001368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0e      	ldr	r2, [pc, #56]	; (800136c <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0b      	ldr	r4, [pc, #44]	; (8001374 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001352:	f7ff ffe3 	bl	800131c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001356:	f001 fccd 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135a:	f7ff fdc7 	bl	8000eec <main>

0800135e <LoopForever>:

LoopForever:
    b LoopForever
 800135e:	e7fe      	b.n	800135e <LoopForever>
  ldr   r0, =_estack
 8001360:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800136c:	0800367c 	.word	0x0800367c
  ldr r2, =_sbss
 8001370:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001374:	20000128 	.word	0x20000128

08001378 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_IRQHandler>
	...

0800137c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_Init+0x24>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_Init+0x24>)
 8001386:	2110      	movs	r1, #16
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f809 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001392:	f7ff ff05 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	40022000 	.word	0x40022000

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_InitTick+0x5c>)
 80013ae:	681c      	ldr	r4, [r3, #0]
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_InitTick+0x60>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	0019      	movs	r1, r3
 80013b6:	23fa      	movs	r3, #250	; 0xfa
 80013b8:	0098      	lsls	r0, r3, #2
 80013ba:	f7fe fea5 	bl	8000108 <__udivsi3>
 80013be:	0003      	movs	r3, r0
 80013c0:	0019      	movs	r1, r3
 80013c2:	0020      	movs	r0, r4
 80013c4:	f7fe fea0 	bl	8000108 <__udivsi3>
 80013c8:	0003      	movs	r3, r0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f903 	bl	80015d6 <HAL_SYSTICK_Config>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e00f      	b.n	80013f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d80b      	bhi.n	80013f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2301      	movs	r3, #1
 80013e2:	425b      	negs	r3, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f8e0 	bl	80015ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_InitTick+0x64>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b003      	add	sp, #12
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x1c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	001a      	movs	r2, r3
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_IncTick+0x20>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	18d2      	adds	r2, r2, r3
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_IncTick+0x20>)
 800141e:	601a      	str	r2, [r3, #0]
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	20000008 	.word	0x20000008
 800142c:	20000120 	.word	0x20000120

08001430 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <HAL_GetTick+0x10>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20000120 	.word	0x20000120

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff fff0 	bl	8001430 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_Delay+0x40>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	001a      	movs	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	189b      	adds	r3, r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	f7ff ffe0 	bl	8001430 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b004      	add	sp, #16
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000008 	.word	0x20000008

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	0002      	movs	r2, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b7f      	cmp	r3, #127	; 0x7f
 800149c:	d828      	bhi.n	80014f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800149e:	4a2f      	ldr	r2, [pc, #188]	; (800155c <__NVIC_SetPriority+0xd4>)
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	33c0      	adds	r3, #192	; 0xc0
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	589b      	ldr	r3, [r3, r2]
 80014ae:	1dfa      	adds	r2, r7, #7
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	0011      	movs	r1, r2
 80014b4:	2203      	movs	r2, #3
 80014b6:	400a      	ands	r2, r1
 80014b8:	00d2      	lsls	r2, r2, #3
 80014ba:	21ff      	movs	r1, #255	; 0xff
 80014bc:	4091      	lsls	r1, r2
 80014be:	000a      	movs	r2, r1
 80014c0:	43d2      	mvns	r2, r2
 80014c2:	401a      	ands	r2, r3
 80014c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	019b      	lsls	r3, r3, #6
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	401a      	ands	r2, r3
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	0018      	movs	r0, r3
 80014d4:	2303      	movs	r3, #3
 80014d6:	4003      	ands	r3, r0
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014dc:	481f      	ldr	r0, [pc, #124]	; (800155c <__NVIC_SetPriority+0xd4>)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	430a      	orrs	r2, r1
 80014e8:	33c0      	adds	r3, #192	; 0xc0
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ee:	e031      	b.n	8001554 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <__NVIC_SetPriority+0xd8>)
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	0019      	movs	r1, r3
 80014f8:	230f      	movs	r3, #15
 80014fa:	400b      	ands	r3, r1
 80014fc:	3b08      	subs	r3, #8
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3306      	adds	r3, #6
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	18d3      	adds	r3, r2, r3
 8001506:	3304      	adds	r3, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1dfa      	adds	r2, r7, #7
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	0011      	movs	r1, r2
 8001510:	2203      	movs	r2, #3
 8001512:	400a      	ands	r2, r1
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	21ff      	movs	r1, #255	; 0xff
 8001518:	4091      	lsls	r1, r2
 800151a:	000a      	movs	r2, r1
 800151c:	43d2      	mvns	r2, r2
 800151e:	401a      	ands	r2, r3
 8001520:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	019b      	lsls	r3, r3, #6
 8001526:	22ff      	movs	r2, #255	; 0xff
 8001528:	401a      	ands	r2, r3
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	2303      	movs	r3, #3
 8001532:	4003      	ands	r3, r0
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <__NVIC_SetPriority+0xd8>)
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	001c      	movs	r4, r3
 8001540:	230f      	movs	r3, #15
 8001542:	4023      	ands	r3, r4
 8001544:	3b08      	subs	r3, #8
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	430a      	orrs	r2, r1
 800154a:	3306      	adds	r3, #6
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	18c3      	adds	r3, r0, r3
 8001550:	3304      	adds	r3, #4
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b003      	add	sp, #12
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <SysTick_Config+0x40>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e010      	b.n	800159c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SysTick_Config+0x44>)
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	3a01      	subs	r2, #1
 8001580:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	2301      	movs	r3, #1
 8001584:	425b      	negs	r3, r3
 8001586:	2103      	movs	r1, #3
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ff7d 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SysTick_Config+0x44>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x44>)
 8001596:	2207      	movs	r2, #7
 8001598:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	00ffffff 	.word	0x00ffffff
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	210f      	movs	r1, #15
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	1c02      	adds	r2, r0, #0
 80015bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff ffbf 	bl	8001564 <SysTick_Config>
 80015e6:	0003      	movs	r3, r0
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e14f      	b.n	80018a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d100      	bne.n	8001618 <HAL_GPIO_Init+0x28>
 8001616:	e140      	b.n	800189a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d00b      	beq.n	8001638 <HAL_GPIO_Init+0x48>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800162c:	2b11      	cmp	r3, #17
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b12      	cmp	r3, #18
 8001636:	d130      	bne.n	800169a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	409a      	lsls	r2, r3
 8001646:	0013      	movs	r3, r2
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	0013      	movs	r3, r2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166e:	2201      	movs	r2, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	2201      	movs	r2, #1
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	43da      	mvns	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0xea>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	58d3      	ldr	r3, [r2, r3]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2207      	movs	r2, #7
 80016ec:	4013      	ands	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2107      	movs	r1, #7
 8001706:	400b      	ands	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	6939      	ldr	r1, [r7, #16]
 8001720:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2203      	movs	r2, #3
 8001740:	401a      	ands	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	055b      	lsls	r3, r3, #21
 800175e:	4013      	ands	r3, r2
 8001760:	d100      	bne.n	8001764 <HAL_GPIO_Init+0x174>
 8001762:	e09a      	b.n	800189a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 800176a:	2101      	movs	r1, #1
 800176c:	430a      	orrs	r2, r1
 800176e:	619a      	str	r2, [r3, #24]
 8001770:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800177c:	4a4f      	ldr	r2, [pc, #316]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	589b      	ldr	r3, [r3, r2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2203      	movs	r2, #3
 800178e:	4013      	ands	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	409a      	lsls	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	43da      	mvns	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	2390      	movs	r3, #144	; 0x90
 80017a4:	05db      	lsls	r3, r3, #23
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a44      	ldr	r2, [pc, #272]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x1de>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_GPIO_Init+0x2d4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x1da>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a42      	ldr	r2, [pc, #264]	; (80018c8 <HAL_GPIO_Init+0x2d8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017d2:	2300      	movs	r3, #0
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	2103      	movs	r1, #3
 80017d8:	400a      	ands	r2, r1
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e4:	4935      	ldr	r1, [pc, #212]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	4013      	ands	r3, r2
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	029b      	lsls	r3, r3, #10
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43da      	mvns	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	035b      	lsls	r3, r3, #13
 800185e:	4013      	ands	r3, r2
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43da      	mvns	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	039b      	lsls	r3, r3, #14
 8001888:	4013      	ands	r3, r2
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	40da      	lsrs	r2, r3
 80018a8:	1e13      	subs	r3, r2, #0
 80018aa:	d000      	beq.n	80018ae <HAL_GPIO_Init+0x2be>
 80018ac:	e6a8      	b.n	8001600 <HAL_GPIO_Init+0x10>
  } 
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b006      	add	sp, #24
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	0008      	movs	r0, r1
 80018da:	0011      	movs	r1, r2
 80018dc:	1cbb      	adds	r3, r7, #2
 80018de:	1c02      	adds	r2, r0, #0
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	1c7b      	adds	r3, r7, #1
 80018e4:	1c0a      	adds	r2, r1, #0
 80018e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	1c7b      	adds	r3, r7, #1
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f0:	1cbb      	adds	r3, r7, #2
 80018f2:	881a      	ldrh	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fa:	1cbb      	adds	r3, r7, #2
 80018fc:	881a      	ldrh	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e303      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x1e>
 8001928:	e08d      	b.n	8001a46 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800192a:	4bc4      	ldr	r3, [pc, #784]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	220c      	movs	r2, #12
 8001930:	4013      	ands	r3, r2
 8001932:	2b04      	cmp	r3, #4
 8001934:	d00e      	beq.n	8001954 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001936:	4bc1      	ldr	r3, [pc, #772]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	220c      	movs	r2, #12
 800193c:	4013      	ands	r3, r2
 800193e:	2b08      	cmp	r3, #8
 8001940:	d116      	bne.n	8001970 <HAL_RCC_OscConfig+0x64>
 8001942:	4bbe      	ldr	r3, [pc, #760]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	401a      	ands	r2, r3
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	429a      	cmp	r2, r3
 8001952:	d10d      	bne.n	8001970 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4bb9      	ldr	r3, [pc, #740]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	029b      	lsls	r3, r3, #10
 800195c:	4013      	ands	r3, r2
 800195e:	d100      	bne.n	8001962 <HAL_RCC_OscConfig+0x56>
 8001960:	e070      	b.n	8001a44 <HAL_RCC_OscConfig+0x138>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d000      	beq.n	800196c <HAL_RCC_OscConfig+0x60>
 800196a:	e06b      	b.n	8001a44 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e2da      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x7c>
 8001978:	4bb0      	ldr	r3, [pc, #704]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4baf      	ldr	r3, [pc, #700]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	0249      	lsls	r1, r1, #9
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e02f      	b.n	80019e8 <HAL_RCC_OscConfig+0xdc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10c      	bne.n	80019aa <HAL_RCC_OscConfig+0x9e>
 8001990:	4baa      	ldr	r3, [pc, #680]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4ba9      	ldr	r3, [pc, #676]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001996:	49aa      	ldr	r1, [pc, #680]	; (8001c40 <HAL_RCC_OscConfig+0x334>)
 8001998:	400a      	ands	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4ba7      	ldr	r3, [pc, #668]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4ba6      	ldr	r3, [pc, #664]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019a2:	49a8      	ldr	r1, [pc, #672]	; (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e01e      	b.n	80019e8 <HAL_RCC_OscConfig+0xdc>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d10e      	bne.n	80019d0 <HAL_RCC_OscConfig+0xc4>
 80019b2:	4ba2      	ldr	r3, [pc, #648]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	02c9      	lsls	r1, r1, #11
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4b9e      	ldr	r3, [pc, #632]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0249      	lsls	r1, r1, #9
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xdc>
 80019d0:	4b9a      	ldr	r3, [pc, #616]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b99      	ldr	r3, [pc, #612]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019d6:	499a      	ldr	r1, [pc, #616]	; (8001c40 <HAL_RCC_OscConfig+0x334>)
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4b97      	ldr	r3, [pc, #604]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 80019e2:	4998      	ldr	r1, [pc, #608]	; (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d014      	beq.n	8001a1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fd1e 	bl	8001430 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fa:	f7ff fd19 	bl	8001430 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b64      	cmp	r3, #100	; 0x64
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e28c      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0c:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	4013      	ands	r3, r2
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0xee>
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fd09 	bl	8001430 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fd04 	bl	8001430 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e277      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	029b      	lsls	r3, r3, #10
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x118>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x146>
 8001a50:	e069      	b.n	8001b26 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	220c      	movs	r2, #12
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d00b      	beq.n	8001a74 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a5c:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	220c      	movs	r2, #12
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d11c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x196>
 8001a68:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	025b      	lsls	r3, r3, #9
 8001a70:	4013      	ands	r3, r2
 8001a72:	d116      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a74:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e24d      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	22f8      	movs	r2, #248	; 0xf8
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	00da      	lsls	r2, r3, #3
 8001a9a:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa0:	e041      	b.n	8001b26 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aaa:	4b64      	ldr	r3, [pc, #400]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fcbb 	bl	8001430 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fcb6 	bl	8001430 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e229      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d0f1      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	22f8      	movs	r2, #248	; 0xf8
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00da      	lsls	r2, r3, #3
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e018      	b.n	8001b26 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af4:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	438a      	bics	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fc96 	bl	8001430 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fc91 	bl	8001430 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e204      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2202      	movs	r2, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d1f1      	bne.n	8001b0a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d036      	beq.n	8001b9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d019      	beq.n	8001b6c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b38:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001b3e:	2101      	movs	r1, #1
 8001b40:	430a      	orrs	r2, r1
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7ff fc74 	bl	8001430 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fc6f 	bl	8001430 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1e2      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d0f1      	beq.n	8001b4e <HAL_RCC_OscConfig+0x242>
 8001b6a:	e018      	b.n	8001b9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fc5a 	bl	8001430 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fc55 	bl	8001430 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1c8      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d1f1      	bne.n	8001b82 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_OscConfig+0x29e>
 8001ba8:	e0b6      	b.n	8001d18 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	231f      	movs	r3, #31
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	055b      	lsls	r3, r3, #21
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d111      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0549      	lsls	r1, r1, #21
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	61da      	str	r2, [r3, #28]
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001bce:	69da      	ldr	r2, [r3, #28]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	055b      	lsls	r3, r3, #21
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bda:	231f      	movs	r3, #31
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	d11a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0049      	lsls	r1, r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc18 	bl	8001430 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff fc13 	bl	8001430 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e186      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x33c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10f      	bne.n	8001c4c <HAL_RCC_OscConfig+0x340>
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <HAL_RCC_OscConfig+0x330>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	430a      	orrs	r2, r1
 8001c36:	621a      	str	r2, [r3, #32]
 8001c38:	e036      	b.n	8001ca8 <HAL_RCC_OscConfig+0x39c>
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	fffeffff 	.word	0xfffeffff
 8001c44:	fffbffff 	.word	0xfffbffff
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x362>
 8001c54:	4bb6      	ldr	r3, [pc, #728]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c56:	6a1a      	ldr	r2, [r3, #32]
 8001c58:	4bb5      	ldr	r3, [pc, #724]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	438a      	bics	r2, r1
 8001c5e:	621a      	str	r2, [r3, #32]
 8001c60:	4bb3      	ldr	r3, [pc, #716]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	4bb2      	ldr	r3, [pc, #712]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c66:	2104      	movs	r1, #4
 8001c68:	438a      	bics	r2, r1
 8001c6a:	621a      	str	r2, [r3, #32]
 8001c6c:	e01c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x39c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x384>
 8001c76:	4bae      	ldr	r3, [pc, #696]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c78:	6a1a      	ldr	r2, [r3, #32]
 8001c7a:	4bad      	ldr	r3, [pc, #692]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	621a      	str	r2, [r3, #32]
 8001c82:	4bab      	ldr	r3, [pc, #684]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	4baa      	ldr	r3, [pc, #680]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	621a      	str	r2, [r3, #32]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x39c>
 8001c90:	4ba7      	ldr	r3, [pc, #668]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c92:	6a1a      	ldr	r2, [r3, #32]
 8001c94:	4ba6      	ldr	r3, [pc, #664]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	438a      	bics	r2, r1
 8001c9a:	621a      	str	r2, [r3, #32]
 8001c9c:	4ba4      	ldr	r3, [pc, #656]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001c9e:	6a1a      	ldr	r2, [r3, #32]
 8001ca0:	4ba3      	ldr	r3, [pc, #652]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fbbe 	bl	8001430 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff fbb9 	bl	8001430 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	4a9b      	ldr	r2, [pc, #620]	; (8001f34 <HAL_RCC_OscConfig+0x628>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e12b      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	4b98      	ldr	r3, [pc, #608]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x3ae>
 8001cd8:	e013      	b.n	8001d02 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fba9 	bl	8001430 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	e009      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fba4 	bl	8001430 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	4a91      	ldr	r2, [pc, #580]	; (8001f34 <HAL_RCC_OscConfig+0x628>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e116      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	4b8d      	ldr	r3, [pc, #564]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d02:	231f      	movs	r3, #31
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0c:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	4b87      	ldr	r3, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d12:	4989      	ldr	r1, [pc, #548]	; (8001f38 <HAL_RCC_OscConfig+0x62c>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d12a      	bne.n	8001d80 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d2a:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2e:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d30:	2104      	movs	r1, #4
 8001d32:	430a      	orrs	r2, r1
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d36:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb75 	bl	8001430 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d4c:	f7ff fb70 	bl	8001430 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0e3      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d5e:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0f1      	beq.n	8001d4c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d68:	4b71      	ldr	r3, [pc, #452]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	22f8      	movs	r2, #248	; 0xf8
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	00da      	lsls	r2, r3, #3
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7e:	e034      	b.n	8001dea <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	3305      	adds	r3, #5
 8001d86:	d111      	bne.n	8001dac <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d8e:	2104      	movs	r1, #4
 8001d90:	438a      	bics	r2, r1
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	22f8      	movs	r2, #248	; 0xf8
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	00da      	lsls	r2, r3, #3
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
 8001daa:	e01e      	b.n	8001dea <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dac:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db0:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001db2:	2104      	movs	r1, #4
 8001db4:	430a      	orrs	r2, r1
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fb34 	bl	8001430 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dce:	f7ff fb2f 	bl	8001430 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0a2      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001de0:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d1f1      	bne.n	8001dce <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d100      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4e8>
 8001df2:	e097      	b.n	8001f24 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df4:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	220c      	movs	r2, #12
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d100      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4f6>
 8001e00:	e06b      	b.n	8001eda <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d14c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e10:	494a      	ldr	r1, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x630>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fb0b 	bl	8001430 <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff fb06 	bl	8001430 <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e079      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	049b      	lsls	r3, r3, #18
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	220f      	movs	r2, #15
 8001e44:	4393      	bics	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <HAL_RCC_OscConfig+0x634>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	431a      	orrs	r2, r3
 8001e66:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	0449      	lsls	r1, r1, #17
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fad9 	bl	8001430 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff fad4 	bl	8001430 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e047      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	049b      	lsls	r3, r3, #18
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x578>
 8001ea2:	e03f      	b.n	8001f24 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001eaa:	4924      	ldr	r1, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x630>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fabe 	bl	8001430 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff fab9 	bl	8001430 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e02c      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	049b      	lsls	r3, r3, #18
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x5ae>
 8001ed8:	e024      	b.n	8001f24 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e01f      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x624>)
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	401a      	ands	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10e      	bne.n	8001f20 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	220f      	movs	r2, #15
 8001f06:	401a      	ands	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	23f0      	movs	r3, #240	; 0xf0
 8001f14:	039b      	lsls	r3, r3, #14
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b008      	add	sp, #32
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	00001388 	.word	0x00001388
 8001f38:	efffffff 	.word	0xefffffff
 8001f3c:	feffffff 	.word	0xfeffffff
 8001f40:	ffc2ffff 	.word	0xffc2ffff

08001f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b3      	b.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d911      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e09a      	b.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d006      	beq.n	8001fac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8001fa4:	21e0      	movs	r1, #224	; 0xe0
 8001fa6:	00c9      	lsls	r1, r1, #3
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	22f0      	movs	r2, #240	; 0xf0
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	029b      	lsls	r3, r3, #10
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d114      	bne.n	8002008 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06e      	b.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	049b      	lsls	r3, r3, #18
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e062      	b.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2202      	movs	r2, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e05b      	b.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2203      	movs	r2, #3
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8002018:	430a      	orrs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800201c:	f7ff fa08 	bl	8001430 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002024:	e009      	b.n	800203a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002026:	f7ff fa03 	bl	8001430 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_RCC_ClockConfig+0x18c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e042      	b.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	220c      	movs	r2, #12
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1ec      	bne.n	8002026 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d211      	bcs.n	800207e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	4393      	bics	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x184>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e020      	b.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2204      	movs	r2, #4
 8002084:	4013      	ands	r3, r2
 8002086:	d009      	beq.n	800209c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_RCC_ClockConfig+0x190>)
 800208e:	4013      	ands	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800209c:	f000 f820 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80020a0:	0001      	movs	r1, r0
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x188>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	220f      	movs	r2, #15
 80020aa:	4013      	ands	r3, r2
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x194>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	000a      	movs	r2, r1
 80020b2:	40da      	lsrs	r2, r3
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x198>)
 80020b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff f973 	bl	80013a4 <HAL_InitTick>
  
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	00001388 	.word	0x00001388
 80020d4:	fffff8ff 	.word	0xfffff8ff
 80020d8:	08003630 	.word	0x08003630
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b08f      	sub	sp, #60	; 0x3c
 80020e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020e6:	2314      	movs	r3, #20
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	4a2b      	ldr	r2, [pc, #172]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020ee:	c313      	stmia	r3!, {r0, r1, r4}
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4a29      	ldr	r2, [pc, #164]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020fa:	c313      	stmia	r3!, {r0, r1, r4}
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002104:	2300      	movs	r3, #0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
 8002120:	2b04      	cmp	r3, #4
 8002122:	d002      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x4a>
 8002124:	2b08      	cmp	r3, #8
 8002126:	d003      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x50>
 8002128:	e02d      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800212e:	e02d      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	0c9b      	lsrs	r3, r3, #18
 8002134:	220f      	movs	r2, #15
 8002136:	4013      	ands	r3, r2
 8002138:	2214      	movs	r2, #20
 800213a:	18ba      	adds	r2, r7, r2
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	220f      	movs	r2, #15
 8002146:	4013      	ands	r3, r2
 8002148:	1d3a      	adds	r2, r7, #4
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800214e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	025b      	lsls	r3, r3, #9
 8002154:	4013      	ands	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800215a:	4812      	ldr	r0, [pc, #72]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800215c:	f7fd ffd4 	bl	8000108 <__udivsi3>
 8002160:	0003      	movs	r3, r0
 8002162:	001a      	movs	r2, r3
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	4353      	muls	r3, r2
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
 800216a:	e009      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800216c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216e:	000a      	movs	r2, r1
 8002170:	0152      	lsls	r2, r2, #5
 8002172:	1a52      	subs	r2, r2, r1
 8002174:	0193      	lsls	r3, r2, #6
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	185b      	adds	r3, r3, r1
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800218a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b00f      	add	sp, #60	; 0x3c
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	080035d0 	.word	0x080035d0
 800219c:	080035e0 	.word	0x080035e0
 80021a0:	40021000 	.word	0x40021000
 80021a4:	007a1200 	.word	0x007a1200

080021a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0a8      	b.n	800230c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2382      	movs	r3, #130	; 0x82
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d009      	beq.n	80021e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	61da      	str	r2, [r3, #28]
 80021d4:	e005      	b.n	80021e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	225d      	movs	r2, #93	; 0x5d
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	225c      	movs	r2, #92	; 0x5c
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fe fff2 	bl	80011e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	225d      	movs	r2, #93	; 0x5d
 8002208:	2102      	movs	r1, #2
 800220a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2140      	movs	r1, #64	; 0x40
 8002218:	438a      	bics	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	23e0      	movs	r3, #224	; 0xe0
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	429a      	cmp	r2, r3
 8002226:	d902      	bls.n	800222e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e002      	b.n	8002234 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	015b      	lsls	r3, r3, #5
 8002232:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	23f0      	movs	r3, #240	; 0xf0
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	429a      	cmp	r2, r3
 800223e:	d008      	beq.n	8002252 <HAL_SPI_Init+0xaa>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	23e0      	movs	r3, #224	; 0xe0
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	429a      	cmp	r2, r3
 800224a:	d002      	beq.n	8002252 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	2382      	movs	r3, #130	; 0x82
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	2384      	movs	r3, #132	; 0x84
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	400b      	ands	r3, r1
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2102      	movs	r1, #2
 800226e:	400b      	ands	r3, r1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2101      	movs	r1, #1
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6999      	ldr	r1, [r3, #24]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	400b      	ands	r3, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2138      	movs	r1, #56	; 0x38
 800228e:	400b      	ands	r3, r1
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	400b      	ands	r3, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	0011      	movs	r1, r2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	2204      	movs	r2, #4
 80022b8:	401a      	ands	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2110      	movs	r1, #16
 80022c0:	400b      	ands	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	2108      	movs	r1, #8
 80022ca:	400b      	ands	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	23f0      	movs	r3, #240	; 0xf0
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	0011      	movs	r1, r2
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	015b      	lsls	r3, r3, #5
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4907      	ldr	r1, [pc, #28]	; (8002314 <HAL_SPI_Init+0x16c>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	225d      	movs	r2, #93	; 0x5d
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bd80      	pop	{r7, pc}
 8002314:	fffff7ff 	.word	0xfffff7ff

08002318 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002328:	2317      	movs	r3, #23
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	2382      	movs	r3, #130	; 0x82
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	429a      	cmp	r2, r3
 800233a:	d113      	bne.n	8002364 <HAL_SPI_Receive+0x4c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10f      	bne.n	8002364 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	225d      	movs	r2, #93	; 0x5d
 8002348:	2104      	movs	r1, #4
 800234a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800234c:	1dbb      	adds	r3, r7, #6
 800234e:	881c      	ldrh	r4, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	0023      	movs	r3, r4
 800235c:	f000 f928 	bl	80025b0 <HAL_SPI_TransmitReceive>
 8002360:	0003      	movs	r3, r0
 8002362:	e11c      	b.n	800259e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	225c      	movs	r2, #92	; 0x5c
 8002368:	5c9b      	ldrb	r3, [r3, r2]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_SPI_Receive+0x5a>
 800236e:	2302      	movs	r3, #2
 8002370:	e115      	b.n	800259e <HAL_SPI_Receive+0x286>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	225c      	movs	r2, #92	; 0x5c
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800237a:	f7ff f859 	bl	8001430 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	225d      	movs	r2, #93	; 0x5d
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d004      	beq.n	8002398 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800238e:	2317      	movs	r3, #23
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
    goto error;
 8002396:	e0f7      	b.n	8002588 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_SPI_Receive+0x8e>
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80023a6:	2317      	movs	r3, #23
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80023ae:	e0eb      	b.n	8002588 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	225d      	movs	r2, #93	; 0x5d
 80023b4:	2104      	movs	r1, #4
 80023b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1dba      	adds	r2, r7, #6
 80023c8:	2144      	movs	r1, #68	; 0x44
 80023ca:	8812      	ldrh	r2, [r2, #0]
 80023cc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1dba      	adds	r2, r7, #6
 80023d2:	2146      	movs	r1, #70	; 0x46
 80023d4:	8812      	ldrh	r2, [r2, #0]
 80023d6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	23e0      	movs	r3, #224	; 0xe0
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	429a      	cmp	r2, r3
 8002400:	d908      	bls.n	8002414 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4966      	ldr	r1, [pc, #408]	; (80025a8 <HAL_SPI_Receive+0x290>)
 800240e:	400a      	ands	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	e008      	b.n	8002426 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0149      	lsls	r1, r1, #5
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	429a      	cmp	r2, r3
 8002430:	d10f      	bne.n	8002452 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	438a      	bics	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4957      	ldr	r1, [pc, #348]	; (80025ac <HAL_SPI_Receive+0x294>)
 800244e:	400a      	ands	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	4013      	ands	r3, r2
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d007      	beq.n	8002470 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2140      	movs	r1, #64	; 0x40
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	23e0      	movs	r3, #224	; 0xe0
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	429a      	cmp	r2, r3
 800247a:	d900      	bls.n	800247e <HAL_SPI_Receive+0x166>
 800247c:	e069      	b.n	8002552 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800247e:	e031      	b.n	80024e4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	2b01      	cmp	r3, #1
 800248c:	d117      	bne.n	80024be <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	330c      	adds	r3, #12
 8002494:	001a      	movs	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	7812      	ldrb	r2, [r2, #0]
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2246      	movs	r2, #70	; 0x46
 80024ae:	5a9b      	ldrh	r3, [r3, r2]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b299      	uxth	r1, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2246      	movs	r2, #70	; 0x46
 80024ba:	5299      	strh	r1, [r3, r2]
 80024bc:	e012      	b.n	80024e4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024be:	f7fe ffb7 	bl	8001430 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d802      	bhi.n	80024d4 <HAL_SPI_Receive+0x1bc>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	d102      	bne.n	80024da <HAL_SPI_Receive+0x1c2>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80024da:	2317      	movs	r3, #23
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2203      	movs	r2, #3
 80024e0:	701a      	strb	r2, [r3, #0]
          goto error;
 80024e2:	e051      	b.n	8002588 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2246      	movs	r2, #70	; 0x46
 80024e8:	5a9b      	ldrh	r3, [r3, r2]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1c7      	bne.n	8002480 <HAL_SPI_Receive+0x168>
 80024f0:	e035      	b.n	800255e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d115      	bne.n	800252c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	b292      	uxth	r2, r2
 800250c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	1c9a      	adds	r2, r3, #2
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2246      	movs	r2, #70	; 0x46
 800251c:	5a9b      	ldrh	r3, [r3, r2]
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b299      	uxth	r1, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2246      	movs	r2, #70	; 0x46
 8002528:	5299      	strh	r1, [r3, r2]
 800252a:	e012      	b.n	8002552 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252c:	f7fe ff80 	bl	8001430 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d802      	bhi.n	8002542 <HAL_SPI_Receive+0x22a>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_SPI_Receive+0x230>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002548:	2317      	movs	r3, #23
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2203      	movs	r2, #3
 800254e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002550:	e01a      	b.n	8002588 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2246      	movs	r2, #70	; 0x46
 8002556:	5a9b      	ldrh	r3, [r3, r2]
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1c9      	bne.n	80024f2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fb1b 	bl	8002ba0 <SPI_EndRxTransaction>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d002      	beq.n	8002574 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800257c:	2317      	movs	r3, #23
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e000      	b.n	8002588 <HAL_SPI_Receive+0x270>
  }

error :
 8002586:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	225d      	movs	r2, #93	; 0x5d
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	225c      	movs	r2, #92	; 0x5c
 8002594:	2100      	movs	r1, #0
 8002596:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002598:	2317      	movs	r3, #23
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b007      	add	sp, #28
 80025a4:	bd90      	pop	{r4, r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	ffffefff 	.word	0xffffefff
 80025ac:	ffffbfff 	.word	0xffffbfff

080025b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	001a      	movs	r2, r3
 80025be:	1cbb      	adds	r3, r7, #2
 80025c0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025c2:	2301      	movs	r3, #1
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025c6:	2323      	movs	r3, #35	; 0x23
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	225c      	movs	r2, #92	; 0x5c
 80025d2:	5c9b      	ldrb	r3, [r3, r2]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x2c>
 80025d8:	2302      	movs	r3, #2
 80025da:	e1b6      	b.n	800294a <HAL_SPI_TransmitReceive+0x39a>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	225c      	movs	r2, #92	; 0x5c
 80025e0:	2101      	movs	r1, #1
 80025e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025e4:	f7fe ff24 	bl	8001430 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025ec:	201b      	movs	r0, #27
 80025ee:	183b      	adds	r3, r7, r0
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	215d      	movs	r1, #93	; 0x5d
 80025f4:	5c52      	ldrb	r2, [r2, r1]
 80025f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80025fe:	2312      	movs	r3, #18
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	1cba      	adds	r2, r7, #2
 8002604:	8812      	ldrh	r2, [r2, #0]
 8002606:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002608:	183b      	adds	r3, r7, r0
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d012      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x86>
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	2382      	movs	r3, #130	; 0x82
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	429a      	cmp	r2, r3
 8002618:	d108      	bne.n	800262c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <HAL_SPI_TransmitReceive+0x7c>
 8002622:	231b      	movs	r3, #27
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d004      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800262c:	2323      	movs	r3, #35	; 0x23
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]
    goto error;
 8002634:	e17e      	b.n	8002934 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d006      	beq.n	800264a <HAL_SPI_TransmitReceive+0x9a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_SPI_TransmitReceive+0x9a>
 8002642:	1cbb      	adds	r3, r7, #2
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800264a:	2323      	movs	r3, #35	; 0x23
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
    goto error;
 8002652:	e16f      	b.n	8002934 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	225d      	movs	r2, #93	; 0x5d
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b04      	cmp	r3, #4
 800265e:	d003      	beq.n	8002668 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	225d      	movs	r2, #93	; 0x5d
 8002664:	2105      	movs	r1, #5
 8002666:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1cba      	adds	r2, r7, #2
 8002678:	2146      	movs	r1, #70	; 0x46
 800267a:	8812      	ldrh	r2, [r2, #0]
 800267c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1cba      	adds	r2, r7, #2
 8002682:	2144      	movs	r1, #68	; 0x44
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1cba      	adds	r2, r7, #2
 8002692:	8812      	ldrh	r2, [r2, #0]
 8002694:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1cba      	adds	r2, r7, #2
 800269a:	8812      	ldrh	r2, [r2, #0]
 800269c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	23e0      	movs	r3, #224	; 0xe0
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d908      	bls.n	80026c8 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	49a4      	ldr	r1, [pc, #656]	; (8002954 <HAL_SPI_TransmitReceive+0x3a4>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	e008      	b.n	80026da <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	0149      	lsls	r1, r1, #5
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2240      	movs	r2, #64	; 0x40
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d007      	beq.n	80026f8 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2140      	movs	r1, #64	; 0x40
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	23e0      	movs	r3, #224	; 0xe0
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	429a      	cmp	r2, r3
 8002702:	d800      	bhi.n	8002706 <HAL_SPI_TransmitReceive+0x156>
 8002704:	e07f      	b.n	8002806 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_SPI_TransmitReceive+0x16a>
 800270e:	2312      	movs	r3, #18
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d000      	beq.n	800271a <HAL_SPI_TransmitReceive+0x16a>
 8002718:	e069      	b.n	80027ee <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	1c9a      	adds	r2, r3, #2
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800273e:	e056      	b.n	80027ee <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d11b      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x1d6>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d016      	beq.n	8002786 <HAL_SPI_TransmitReceive+0x1d6>
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2b01      	cmp	r3, #1
 800275c:	d113      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	2b01      	cmp	r3, #1
 8002792:	d11c      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x21e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2246      	movs	r2, #70	; 0x46
 8002798:	5a9b      	ldrh	r3, [r3, r2]
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d016      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	b292      	uxth	r2, r2
 80027ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	1c9a      	adds	r2, r3, #2
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2246      	movs	r2, #70	; 0x46
 80027bc:	5a9b      	ldrh	r3, [r3, r2]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b299      	uxth	r1, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2246      	movs	r2, #70	; 0x46
 80027c8:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027ca:	2301      	movs	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027ce:	f7fe fe2f 	bl	8001430 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027da:	429a      	cmp	r2, r3
 80027dc:	d807      	bhi.n	80027ee <HAL_SPI_TransmitReceive+0x23e>
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	3301      	adds	r3, #1
 80027e2:	d004      	beq.n	80027ee <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 80027e4:	2323      	movs	r3, #35	; 0x23
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	2203      	movs	r2, #3
 80027ea:	701a      	strb	r2, [r3, #0]
        goto error;
 80027ec:	e0a2      	b.n	8002934 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1a3      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x190>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2246      	movs	r2, #70	; 0x46
 80027fc:	5a9b      	ldrh	r3, [r3, r2]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d19d      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x190>
 8002804:	e085      	b.n	8002912 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_SPI_TransmitReceive+0x26a>
 800280e:	2312      	movs	r3, #18
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d000      	beq.n	800281a <HAL_SPI_TransmitReceive+0x26a>
 8002818:	e070      	b.n	80028fc <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002840:	e05c      	b.n	80028fc <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2202      	movs	r2, #2
 800284a:	4013      	ands	r3, r2
 800284c:	2b02      	cmp	r3, #2
 800284e:	d11c      	bne.n	800288a <HAL_SPI_TransmitReceive+0x2da>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d017      	beq.n	800288a <HAL_SPI_TransmitReceive+0x2da>
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	d114      	bne.n	800288a <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	2b01      	cmp	r3, #1
 8002896:	d11e      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x326>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2246      	movs	r2, #70	; 0x46
 800289c:	5a9b      	ldrh	r3, [r3, r2]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	001a      	movs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2246      	movs	r2, #70	; 0x46
 80028c4:	5a9b      	ldrh	r3, [r3, r2]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b299      	uxth	r1, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2246      	movs	r2, #70	; 0x46
 80028d0:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d2:	2301      	movs	r3, #1
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028d6:	f7fe fdab 	bl	8001430 <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d802      	bhi.n	80028ec <HAL_SPI_TransmitReceive+0x33c>
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	3301      	adds	r3, #1
 80028ea:	d102      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x342>
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80028f2:	2323      	movs	r3, #35	; 0x23
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2203      	movs	r2, #3
 80028f8:	701a      	strb	r2, [r3, #0]
        goto error;
 80028fa:	e01b      	b.n	8002934 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d19d      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x292>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2246      	movs	r2, #70	; 0x46
 800290a:	5a9b      	ldrh	r3, [r3, r2]
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d197      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 f99f 	bl	8002c5c <SPI_EndRxTxTransaction>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d007      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8002922:	2323      	movs	r3, #35	; 0x23
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	661a      	str	r2, [r3, #96]	; 0x60
 8002930:	e000      	b.n	8002934 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8002932:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	225d      	movs	r2, #93	; 0x5d
 8002938:	2101      	movs	r1, #1
 800293a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	225c      	movs	r2, #92	; 0x5c
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002944:	2323      	movs	r3, #35	; 0x23
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b00a      	add	sp, #40	; 0x28
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	ffffefff 	.word	0xffffefff

08002958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002968:	f7fe fd62 	bl	8001430 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	18d3      	adds	r3, r2, r3
 8002976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002978:	f7fe fd5a 	bl	8001430 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002980:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	015b      	lsls	r3, r3, #5
 8002986:	0d1b      	lsrs	r3, r3, #20
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	4353      	muls	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800298e:	e058      	b.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	d055      	beq.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002996:	f7fe fd4b 	bl	8001430 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d902      	bls.n	80029ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d142      	bne.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	21e0      	movs	r1, #224	; 0xe0
 80029b8:	438a      	bics	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	2382      	movs	r3, #130	; 0x82
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d113      	bne.n	80029f0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d005      	beq.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	438a      	bics	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	019b      	lsls	r3, r3, #6
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d110      	bne.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	491a      	ldr	r1, [pc, #104]	; (8002a70 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	0189      	lsls	r1, r1, #6
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	225d      	movs	r2, #93	; 0x5d
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	225c      	movs	r2, #92	; 0x5c
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e017      	b.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	425a      	negs	r2, r3
 8002a52:	4153      	adcs	r3, r2
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	001a      	movs	r2, r3
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d197      	bne.n	8002990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b008      	add	sp, #32
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	ffffdfff 	.word	0xffffdfff

08002a74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a82:	f7fe fcd5 	bl	8001430 <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	18d3      	adds	r3, r2, r3
 8002a90:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a92:	f7fe fccd 	bl	8001430 <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a9a:	4b3f      	ldr	r3, [pc, #252]	; (8002b98 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	0013      	movs	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	00da      	lsls	r2, r3, #3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	0d1b      	lsrs	r3, r3, #20
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	4353      	muls	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ab0:	e064      	b.n	8002b7c <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	23c0      	movs	r3, #192	; 0xc0
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d106      	bne.n	8002aca <SPI_WaitFifoStateUntilTimeout+0x56>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	d055      	beq.n	8002b7c <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ad0:	f7fe fcae 	bl	8001430 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d902      	bls.n	8002ae6 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d142      	bne.n	8002b6c <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	21e0      	movs	r1, #224	; 0xe0
 8002af2:	438a      	bics	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	2382      	movs	r3, #130	; 0x82
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d113      	bne.n	8002b2a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d005      	beq.n	8002b1a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d107      	bne.n	8002b2a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2140      	movs	r1, #64	; 0x40
 8002b26:	438a      	bics	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d110      	bne.n	8002b58 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	0189      	lsls	r1, r1, #6
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	225d      	movs	r2, #93	; 0x5d
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	225c      	movs	r2, #92	; 0x5c
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e010      	b.n	8002b8e <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d192      	bne.n	8002ab2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b008      	add	sp, #32
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	ffffdfff 	.word	0xffffdfff

08002ba0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	2382      	movs	r3, #130	; 0x82
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d113      	bne.n	8002be0 <SPI_EndRxTransaction+0x40>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d005      	beq.n	8002bd0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	438a      	bics	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	0013      	movs	r3, r2
 8002bea:	2200      	movs	r2, #0
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	f7ff feb3 	bl	8002958 <SPI_WaitFlagStateUntilTimeout>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d007      	beq.n	8002c06 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e026      	b.n	8002c54 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	2382      	movs	r3, #130	; 0x82
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11f      	bne.n	8002c52 <SPI_EndRxTransaction+0xb2>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d005      	beq.n	8002c2a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d113      	bne.n	8002c52 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	23c0      	movs	r3, #192	; 0xc0
 8002c2e:	00d9      	lsls	r1, r3, #3
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	0013      	movs	r3, r2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f7ff ff1b 	bl	8002a74 <SPI_WaitFifoStateUntilTimeout>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d007      	beq.n	8002c52 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	2220      	movs	r2, #32
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e000      	b.n	8002c54 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b004      	add	sp, #16
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	0159      	lsls	r1, r3, #5
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	0013      	movs	r3, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	f7ff fefc 	bl	8002a74 <SPI_WaitFifoStateUntilTimeout>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d007      	beq.n	8002c90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c84:	2220      	movs	r2, #32
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e027      	b.n	8002ce0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	0013      	movs	r3, r2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	f7ff fe5b 	bl	8002958 <SPI_WaitFlagStateUntilTimeout>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d007      	beq.n	8002cb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	2220      	movs	r2, #32
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e014      	b.n	8002ce0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	23c0      	movs	r3, #192	; 0xc0
 8002cba:	00d9      	lsls	r1, r3, #3
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f7ff fed5 	bl	8002a74 <SPI_WaitFifoStateUntilTimeout>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d007      	beq.n	8002cde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e000      	b.n	8002ce0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <__errno>:
 8002ce8:	4b01      	ldr	r3, [pc, #4]	; (8002cf0 <__errno+0x8>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	4770      	bx	lr
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	2000000c 	.word	0x2000000c

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	4d0c      	ldr	r5, [pc, #48]	; (8002d2c <__libc_init_array+0x38>)
 8002cfa:	4c0d      	ldr	r4, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfc:	1b64      	subs	r4, r4, r5
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	42a6      	cmp	r6, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	2600      	movs	r6, #0
 8002d06:	f000 fc29 	bl	800355c <_init>
 8002d0a:	4d0a      	ldr	r5, [pc, #40]	; (8002d34 <__libc_init_array+0x40>)
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	; (8002d38 <__libc_init_array+0x44>)
 8002d0e:	1b64      	subs	r4, r4, r5
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	42a6      	cmp	r6, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	00b3      	lsls	r3, r6, #2
 8002d1a:	58eb      	ldr	r3, [r5, r3]
 8002d1c:	4798      	blx	r3
 8002d1e:	3601      	adds	r6, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	00b3      	lsls	r3, r6, #2
 8002d24:	58eb      	ldr	r3, [r5, r3]
 8002d26:	4798      	blx	r3
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08003674 	.word	0x08003674
 8002d30:	08003674 	.word	0x08003674
 8002d34:	08003674 	.word	0x08003674
 8002d38:	08003678 	.word	0x08003678

08002d3c <memset>:
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	1812      	adds	r2, r2, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	7019      	strb	r1, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <siprintf>:
 8002d4c:	b40e      	push	{r1, r2, r3}
 8002d4e:	b500      	push	{lr}
 8002d50:	490b      	ldr	r1, [pc, #44]	; (8002d80 <siprintf+0x34>)
 8002d52:	b09c      	sub	sp, #112	; 0x70
 8002d54:	ab1d      	add	r3, sp, #116	; 0x74
 8002d56:	9002      	str	r0, [sp, #8]
 8002d58:	9006      	str	r0, [sp, #24]
 8002d5a:	9107      	str	r1, [sp, #28]
 8002d5c:	9104      	str	r1, [sp, #16]
 8002d5e:	4809      	ldr	r0, [pc, #36]	; (8002d84 <siprintf+0x38>)
 8002d60:	4909      	ldr	r1, [pc, #36]	; (8002d88 <siprintf+0x3c>)
 8002d62:	cb04      	ldmia	r3!, {r2}
 8002d64:	9105      	str	r1, [sp, #20]
 8002d66:	6800      	ldr	r0, [r0, #0]
 8002d68:	a902      	add	r1, sp, #8
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	f000 f870 	bl	8002e50 <_svfiprintf_r>
 8002d70:	2300      	movs	r3, #0
 8002d72:	9a02      	ldr	r2, [sp, #8]
 8002d74:	7013      	strb	r3, [r2, #0]
 8002d76:	b01c      	add	sp, #112	; 0x70
 8002d78:	bc08      	pop	{r3}
 8002d7a:	b003      	add	sp, #12
 8002d7c:	4718      	bx	r3
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	7fffffff 	.word	0x7fffffff
 8002d84:	2000000c 	.word	0x2000000c
 8002d88:	ffff0208 	.word	0xffff0208

08002d8c <__ssputs_r>:
 8002d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8e:	688e      	ldr	r6, [r1, #8]
 8002d90:	b085      	sub	sp, #20
 8002d92:	0007      	movs	r7, r0
 8002d94:	000c      	movs	r4, r1
 8002d96:	9203      	str	r2, [sp, #12]
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	429e      	cmp	r6, r3
 8002d9c:	d83c      	bhi.n	8002e18 <__ssputs_r+0x8c>
 8002d9e:	2390      	movs	r3, #144	; 0x90
 8002da0:	898a      	ldrh	r2, [r1, #12]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	421a      	tst	r2, r3
 8002da6:	d034      	beq.n	8002e12 <__ssputs_r+0x86>
 8002da8:	2503      	movs	r5, #3
 8002daa:	6909      	ldr	r1, [r1, #16]
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	1a5b      	subs	r3, r3, r1
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	6963      	ldr	r3, [r4, #20]
 8002db4:	9802      	ldr	r0, [sp, #8]
 8002db6:	435d      	muls	r5, r3
 8002db8:	0feb      	lsrs	r3, r5, #31
 8002dba:	195d      	adds	r5, r3, r5
 8002dbc:	9b01      	ldr	r3, [sp, #4]
 8002dbe:	106d      	asrs	r5, r5, #1
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	181b      	adds	r3, r3, r0
 8002dc4:	42ab      	cmp	r3, r5
 8002dc6:	d900      	bls.n	8002dca <__ssputs_r+0x3e>
 8002dc8:	001d      	movs	r5, r3
 8002dca:	0553      	lsls	r3, r2, #21
 8002dcc:	d532      	bpl.n	8002e34 <__ssputs_r+0xa8>
 8002dce:	0029      	movs	r1, r5
 8002dd0:	0038      	movs	r0, r7
 8002dd2:	f000 fb23 	bl	800341c <_malloc_r>
 8002dd6:	1e06      	subs	r6, r0, #0
 8002dd8:	d109      	bne.n	8002dee <__ssputs_r+0x62>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	2340      	movs	r3, #64	; 0x40
 8002de0:	2001      	movs	r0, #1
 8002de2:	89a2      	ldrh	r2, [r4, #12]
 8002de4:	4240      	negs	r0, r0
 8002de6:	4313      	orrs	r3, r2
 8002de8:	81a3      	strh	r3, [r4, #12]
 8002dea:	b005      	add	sp, #20
 8002dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dee:	9a02      	ldr	r2, [sp, #8]
 8002df0:	6921      	ldr	r1, [r4, #16]
 8002df2:	f000 faac 	bl	800334e <memcpy>
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <__ssputs_r+0xc0>)
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	81a3      	strh	r3, [r4, #12]
 8002e02:	9b02      	ldr	r3, [sp, #8]
 8002e04:	6126      	str	r6, [r4, #16]
 8002e06:	18f6      	adds	r6, r6, r3
 8002e08:	6026      	str	r6, [r4, #0]
 8002e0a:	6165      	str	r5, [r4, #20]
 8002e0c:	9e01      	ldr	r6, [sp, #4]
 8002e0e:	1aed      	subs	r5, r5, r3
 8002e10:	60a5      	str	r5, [r4, #8]
 8002e12:	9b01      	ldr	r3, [sp, #4]
 8002e14:	429e      	cmp	r6, r3
 8002e16:	d900      	bls.n	8002e1a <__ssputs_r+0x8e>
 8002e18:	9e01      	ldr	r6, [sp, #4]
 8002e1a:	0032      	movs	r2, r6
 8002e1c:	9903      	ldr	r1, [sp, #12]
 8002e1e:	6820      	ldr	r0, [r4, #0]
 8002e20:	f000 fa9e 	bl	8003360 <memmove>
 8002e24:	68a3      	ldr	r3, [r4, #8]
 8002e26:	2000      	movs	r0, #0
 8002e28:	1b9b      	subs	r3, r3, r6
 8002e2a:	60a3      	str	r3, [r4, #8]
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	199e      	adds	r6, r3, r6
 8002e30:	6026      	str	r6, [r4, #0]
 8002e32:	e7da      	b.n	8002dea <__ssputs_r+0x5e>
 8002e34:	002a      	movs	r2, r5
 8002e36:	0038      	movs	r0, r7
 8002e38:	f000 fb4e 	bl	80034d8 <_realloc_r>
 8002e3c:	1e06      	subs	r6, r0, #0
 8002e3e:	d1e0      	bne.n	8002e02 <__ssputs_r+0x76>
 8002e40:	6921      	ldr	r1, [r4, #16]
 8002e42:	0038      	movs	r0, r7
 8002e44:	f000 faa0 	bl	8003388 <_free_r>
 8002e48:	e7c7      	b.n	8002dda <__ssputs_r+0x4e>
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	fffffb7f 	.word	0xfffffb7f

08002e50 <_svfiprintf_r>:
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b0a1      	sub	sp, #132	; 0x84
 8002e54:	9003      	str	r0, [sp, #12]
 8002e56:	001d      	movs	r5, r3
 8002e58:	898b      	ldrh	r3, [r1, #12]
 8002e5a:	000f      	movs	r7, r1
 8002e5c:	0016      	movs	r6, r2
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	d511      	bpl.n	8002e86 <_svfiprintf_r+0x36>
 8002e62:	690b      	ldr	r3, [r1, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10e      	bne.n	8002e86 <_svfiprintf_r+0x36>
 8002e68:	2140      	movs	r1, #64	; 0x40
 8002e6a:	f000 fad7 	bl	800341c <_malloc_r>
 8002e6e:	6038      	str	r0, [r7, #0]
 8002e70:	6138      	str	r0, [r7, #16]
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d105      	bne.n	8002e82 <_svfiprintf_r+0x32>
 8002e76:	230c      	movs	r3, #12
 8002e78:	9a03      	ldr	r2, [sp, #12]
 8002e7a:	3801      	subs	r0, #1
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	b021      	add	sp, #132	; 0x84
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e82:	2340      	movs	r3, #64	; 0x40
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	2300      	movs	r3, #0
 8002e88:	ac08      	add	r4, sp, #32
 8002e8a:	6163      	str	r3, [r4, #20]
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	7663      	strb	r3, [r4, #25]
 8002e90:	3310      	adds	r3, #16
 8002e92:	76a3      	strb	r3, [r4, #26]
 8002e94:	9507      	str	r5, [sp, #28]
 8002e96:	0035      	movs	r5, r6
 8002e98:	782b      	ldrb	r3, [r5, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <_svfiprintf_r+0x52>
 8002e9e:	2b25      	cmp	r3, #37	; 0x25
 8002ea0:	d146      	bne.n	8002f30 <_svfiprintf_r+0xe0>
 8002ea2:	1bab      	subs	r3, r5, r6
 8002ea4:	9305      	str	r3, [sp, #20]
 8002ea6:	d00c      	beq.n	8002ec2 <_svfiprintf_r+0x72>
 8002ea8:	0032      	movs	r2, r6
 8002eaa:	0039      	movs	r1, r7
 8002eac:	9803      	ldr	r0, [sp, #12]
 8002eae:	f7ff ff6d 	bl	8002d8c <__ssputs_r>
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	d100      	bne.n	8002eb8 <_svfiprintf_r+0x68>
 8002eb6:	e0ae      	b.n	8003016 <_svfiprintf_r+0x1c6>
 8002eb8:	6962      	ldr	r2, [r4, #20]
 8002eba:	9b05      	ldr	r3, [sp, #20]
 8002ebc:	4694      	mov	ip, r2
 8002ebe:	4463      	add	r3, ip
 8002ec0:	6163      	str	r3, [r4, #20]
 8002ec2:	782b      	ldrb	r3, [r5, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d100      	bne.n	8002eca <_svfiprintf_r+0x7a>
 8002ec8:	e0a5      	b.n	8003016 <_svfiprintf_r+0x1c6>
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4252      	negs	r2, r2
 8002ed0:	6062      	str	r2, [r4, #4]
 8002ed2:	a904      	add	r1, sp, #16
 8002ed4:	3254      	adds	r2, #84	; 0x54
 8002ed6:	1852      	adds	r2, r2, r1
 8002ed8:	1c6e      	adds	r6, r5, #1
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	60e3      	str	r3, [r4, #12]
 8002ede:	60a3      	str	r3, [r4, #8]
 8002ee0:	7013      	strb	r3, [r2, #0]
 8002ee2:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ee4:	7831      	ldrb	r1, [r6, #0]
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	4853      	ldr	r0, [pc, #332]	; (8003038 <_svfiprintf_r+0x1e8>)
 8002eea:	f000 fa25 	bl	8003338 <memchr>
 8002eee:	1c75      	adds	r5, r6, #1
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d11f      	bne.n	8002f34 <_svfiprintf_r+0xe4>
 8002ef4:	6822      	ldr	r2, [r4, #0]
 8002ef6:	06d3      	lsls	r3, r2, #27
 8002ef8:	d504      	bpl.n	8002f04 <_svfiprintf_r+0xb4>
 8002efa:	2353      	movs	r3, #83	; 0x53
 8002efc:	a904      	add	r1, sp, #16
 8002efe:	185b      	adds	r3, r3, r1
 8002f00:	2120      	movs	r1, #32
 8002f02:	7019      	strb	r1, [r3, #0]
 8002f04:	0713      	lsls	r3, r2, #28
 8002f06:	d504      	bpl.n	8002f12 <_svfiprintf_r+0xc2>
 8002f08:	2353      	movs	r3, #83	; 0x53
 8002f0a:	a904      	add	r1, sp, #16
 8002f0c:	185b      	adds	r3, r3, r1
 8002f0e:	212b      	movs	r1, #43	; 0x2b
 8002f10:	7019      	strb	r1, [r3, #0]
 8002f12:	7833      	ldrb	r3, [r6, #0]
 8002f14:	2b2a      	cmp	r3, #42	; 0x2a
 8002f16:	d016      	beq.n	8002f46 <_svfiprintf_r+0xf6>
 8002f18:	0035      	movs	r5, r6
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	200a      	movs	r0, #10
 8002f1e:	68e3      	ldr	r3, [r4, #12]
 8002f20:	782a      	ldrb	r2, [r5, #0]
 8002f22:	1c6e      	adds	r6, r5, #1
 8002f24:	3a30      	subs	r2, #48	; 0x30
 8002f26:	2a09      	cmp	r2, #9
 8002f28:	d94e      	bls.n	8002fc8 <_svfiprintf_r+0x178>
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	d018      	beq.n	8002f60 <_svfiprintf_r+0x110>
 8002f2e:	e010      	b.n	8002f52 <_svfiprintf_r+0x102>
 8002f30:	3501      	adds	r5, #1
 8002f32:	e7b1      	b.n	8002e98 <_svfiprintf_r+0x48>
 8002f34:	4b40      	ldr	r3, [pc, #256]	; (8003038 <_svfiprintf_r+0x1e8>)
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	1ac0      	subs	r0, r0, r3
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	4083      	lsls	r3, r0
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	002e      	movs	r6, r5
 8002f44:	e7ce      	b.n	8002ee4 <_svfiprintf_r+0x94>
 8002f46:	9b07      	ldr	r3, [sp, #28]
 8002f48:	1d19      	adds	r1, r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	9107      	str	r1, [sp, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db01      	blt.n	8002f56 <_svfiprintf_r+0x106>
 8002f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f54:	e004      	b.n	8002f60 <_svfiprintf_r+0x110>
 8002f56:	425b      	negs	r3, r3
 8002f58:	60e3      	str	r3, [r4, #12]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	6023      	str	r3, [r4, #0]
 8002f60:	782b      	ldrb	r3, [r5, #0]
 8002f62:	2b2e      	cmp	r3, #46	; 0x2e
 8002f64:	d10a      	bne.n	8002f7c <_svfiprintf_r+0x12c>
 8002f66:	786b      	ldrb	r3, [r5, #1]
 8002f68:	2b2a      	cmp	r3, #42	; 0x2a
 8002f6a:	d135      	bne.n	8002fd8 <_svfiprintf_r+0x188>
 8002f6c:	9b07      	ldr	r3, [sp, #28]
 8002f6e:	3502      	adds	r5, #2
 8002f70:	1d1a      	adds	r2, r3, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	9207      	str	r2, [sp, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db2b      	blt.n	8002fd2 <_svfiprintf_r+0x182>
 8002f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f7c:	4e2f      	ldr	r6, [pc, #188]	; (800303c <_svfiprintf_r+0x1ec>)
 8002f7e:	7829      	ldrb	r1, [r5, #0]
 8002f80:	2203      	movs	r2, #3
 8002f82:	0030      	movs	r0, r6
 8002f84:	f000 f9d8 	bl	8003338 <memchr>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d006      	beq.n	8002f9a <_svfiprintf_r+0x14a>
 8002f8c:	2340      	movs	r3, #64	; 0x40
 8002f8e:	1b80      	subs	r0, r0, r6
 8002f90:	4083      	lsls	r3, r0
 8002f92:	6822      	ldr	r2, [r4, #0]
 8002f94:	3501      	adds	r5, #1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	7829      	ldrb	r1, [r5, #0]
 8002f9c:	2206      	movs	r2, #6
 8002f9e:	4828      	ldr	r0, [pc, #160]	; (8003040 <_svfiprintf_r+0x1f0>)
 8002fa0:	1c6e      	adds	r6, r5, #1
 8002fa2:	7621      	strb	r1, [r4, #24]
 8002fa4:	f000 f9c8 	bl	8003338 <memchr>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d03c      	beq.n	8003026 <_svfiprintf_r+0x1d6>
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <_svfiprintf_r+0x1f4>)
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d125      	bne.n	8002ffe <_svfiprintf_r+0x1ae>
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	9b07      	ldr	r3, [sp, #28]
 8002fb6:	3307      	adds	r3, #7
 8002fb8:	4393      	bics	r3, r2
 8002fba:	3308      	adds	r3, #8
 8002fbc:	9307      	str	r3, [sp, #28]
 8002fbe:	6963      	ldr	r3, [r4, #20]
 8002fc0:	9a04      	ldr	r2, [sp, #16]
 8002fc2:	189b      	adds	r3, r3, r2
 8002fc4:	6163      	str	r3, [r4, #20]
 8002fc6:	e766      	b.n	8002e96 <_svfiprintf_r+0x46>
 8002fc8:	4343      	muls	r3, r0
 8002fca:	2101      	movs	r1, #1
 8002fcc:	189b      	adds	r3, r3, r2
 8002fce:	0035      	movs	r5, r6
 8002fd0:	e7a6      	b.n	8002f20 <_svfiprintf_r+0xd0>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	e7d0      	b.n	8002f7a <_svfiprintf_r+0x12a>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	200a      	movs	r0, #10
 8002fdc:	001a      	movs	r2, r3
 8002fde:	3501      	adds	r5, #1
 8002fe0:	6063      	str	r3, [r4, #4]
 8002fe2:	7829      	ldrb	r1, [r5, #0]
 8002fe4:	1c6e      	adds	r6, r5, #1
 8002fe6:	3930      	subs	r1, #48	; 0x30
 8002fe8:	2909      	cmp	r1, #9
 8002fea:	d903      	bls.n	8002ff4 <_svfiprintf_r+0x1a4>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0c5      	beq.n	8002f7c <_svfiprintf_r+0x12c>
 8002ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8002ff2:	e7c3      	b.n	8002f7c <_svfiprintf_r+0x12c>
 8002ff4:	4342      	muls	r2, r0
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	1852      	adds	r2, r2, r1
 8002ffa:	0035      	movs	r5, r6
 8002ffc:	e7f1      	b.n	8002fe2 <_svfiprintf_r+0x192>
 8002ffe:	ab07      	add	r3, sp, #28
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	003a      	movs	r2, r7
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <_svfiprintf_r+0x1f8>)
 8003006:	0021      	movs	r1, r4
 8003008:	9803      	ldr	r0, [sp, #12]
 800300a:	e000      	b.n	800300e <_svfiprintf_r+0x1be>
 800300c:	bf00      	nop
 800300e:	9004      	str	r0, [sp, #16]
 8003010:	9b04      	ldr	r3, [sp, #16]
 8003012:	3301      	adds	r3, #1
 8003014:	d1d3      	bne.n	8002fbe <_svfiprintf_r+0x16e>
 8003016:	89bb      	ldrh	r3, [r7, #12]
 8003018:	980d      	ldr	r0, [sp, #52]	; 0x34
 800301a:	065b      	lsls	r3, r3, #25
 800301c:	d400      	bmi.n	8003020 <_svfiprintf_r+0x1d0>
 800301e:	e72e      	b.n	8002e7e <_svfiprintf_r+0x2e>
 8003020:	2001      	movs	r0, #1
 8003022:	4240      	negs	r0, r0
 8003024:	e72b      	b.n	8002e7e <_svfiprintf_r+0x2e>
 8003026:	ab07      	add	r3, sp, #28
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	003a      	movs	r2, r7
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <_svfiprintf_r+0x1f8>)
 800302e:	0021      	movs	r1, r4
 8003030:	9803      	ldr	r0, [sp, #12]
 8003032:	f000 f879 	bl	8003128 <_printf_i>
 8003036:	e7ea      	b.n	800300e <_svfiprintf_r+0x1be>
 8003038:	08003640 	.word	0x08003640
 800303c:	08003646 	.word	0x08003646
 8003040:	0800364a 	.word	0x0800364a
 8003044:	00000000 	.word	0x00000000
 8003048:	08002d8d 	.word	0x08002d8d

0800304c <_printf_common>:
 800304c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800304e:	0015      	movs	r5, r2
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	688a      	ldr	r2, [r1, #8]
 8003054:	690b      	ldr	r3, [r1, #16]
 8003056:	9000      	str	r0, [sp, #0]
 8003058:	000c      	movs	r4, r1
 800305a:	4293      	cmp	r3, r2
 800305c:	da00      	bge.n	8003060 <_printf_common+0x14>
 800305e:	0013      	movs	r3, r2
 8003060:	0022      	movs	r2, r4
 8003062:	602b      	str	r3, [r5, #0]
 8003064:	3243      	adds	r2, #67	; 0x43
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	2a00      	cmp	r2, #0
 800306a:	d001      	beq.n	8003070 <_printf_common+0x24>
 800306c:	3301      	adds	r3, #1
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	d502      	bpl.n	800307c <_printf_common+0x30>
 8003076:	682b      	ldr	r3, [r5, #0]
 8003078:	3302      	adds	r3, #2
 800307a:	602b      	str	r3, [r5, #0]
 800307c:	2706      	movs	r7, #6
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	401f      	ands	r7, r3
 8003082:	d027      	beq.n	80030d4 <_printf_common+0x88>
 8003084:	0023      	movs	r3, r4
 8003086:	3343      	adds	r3, #67	; 0x43
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	1e5a      	subs	r2, r3, #1
 800308c:	4193      	sbcs	r3, r2
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	0692      	lsls	r2, r2, #26
 8003092:	d430      	bmi.n	80030f6 <_printf_common+0xaa>
 8003094:	0022      	movs	r2, r4
 8003096:	9901      	ldr	r1, [sp, #4]
 8003098:	3243      	adds	r2, #67	; 0x43
 800309a:	9800      	ldr	r0, [sp, #0]
 800309c:	9e08      	ldr	r6, [sp, #32]
 800309e:	47b0      	blx	r6
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d025      	beq.n	80030f0 <_printf_common+0xa4>
 80030a4:	2306      	movs	r3, #6
 80030a6:	6820      	ldr	r0, [r4, #0]
 80030a8:	682a      	ldr	r2, [r5, #0]
 80030aa:	68e1      	ldr	r1, [r4, #12]
 80030ac:	4003      	ands	r3, r0
 80030ae:	2500      	movs	r5, #0
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d103      	bne.n	80030bc <_printf_common+0x70>
 80030b4:	1a8d      	subs	r5, r1, r2
 80030b6:	43eb      	mvns	r3, r5
 80030b8:	17db      	asrs	r3, r3, #31
 80030ba:	401d      	ands	r5, r3
 80030bc:	68a3      	ldr	r3, [r4, #8]
 80030be:	6922      	ldr	r2, [r4, #16]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	dd01      	ble.n	80030c8 <_printf_common+0x7c>
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	18ed      	adds	r5, r5, r3
 80030c8:	2700      	movs	r7, #0
 80030ca:	42bd      	cmp	r5, r7
 80030cc:	d120      	bne.n	8003110 <_printf_common+0xc4>
 80030ce:	2000      	movs	r0, #0
 80030d0:	e010      	b.n	80030f4 <_printf_common+0xa8>
 80030d2:	3701      	adds	r7, #1
 80030d4:	68e3      	ldr	r3, [r4, #12]
 80030d6:	682a      	ldr	r2, [r5, #0]
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	42bb      	cmp	r3, r7
 80030dc:	ddd2      	ble.n	8003084 <_printf_common+0x38>
 80030de:	0022      	movs	r2, r4
 80030e0:	2301      	movs	r3, #1
 80030e2:	3219      	adds	r2, #25
 80030e4:	9901      	ldr	r1, [sp, #4]
 80030e6:	9800      	ldr	r0, [sp, #0]
 80030e8:	9e08      	ldr	r6, [sp, #32]
 80030ea:	47b0      	blx	r6
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d1f0      	bne.n	80030d2 <_printf_common+0x86>
 80030f0:	2001      	movs	r0, #1
 80030f2:	4240      	negs	r0, r0
 80030f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030f6:	2030      	movs	r0, #48	; 0x30
 80030f8:	18e1      	adds	r1, r4, r3
 80030fa:	3143      	adds	r1, #67	; 0x43
 80030fc:	7008      	strb	r0, [r1, #0]
 80030fe:	0021      	movs	r1, r4
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	3145      	adds	r1, #69	; 0x45
 8003104:	7809      	ldrb	r1, [r1, #0]
 8003106:	18a2      	adds	r2, r4, r2
 8003108:	3243      	adds	r2, #67	; 0x43
 800310a:	3302      	adds	r3, #2
 800310c:	7011      	strb	r1, [r2, #0]
 800310e:	e7c1      	b.n	8003094 <_printf_common+0x48>
 8003110:	0022      	movs	r2, r4
 8003112:	2301      	movs	r3, #1
 8003114:	321a      	adds	r2, #26
 8003116:	9901      	ldr	r1, [sp, #4]
 8003118:	9800      	ldr	r0, [sp, #0]
 800311a:	9e08      	ldr	r6, [sp, #32]
 800311c:	47b0      	blx	r6
 800311e:	1c43      	adds	r3, r0, #1
 8003120:	d0e6      	beq.n	80030f0 <_printf_common+0xa4>
 8003122:	3701      	adds	r7, #1
 8003124:	e7d1      	b.n	80030ca <_printf_common+0x7e>
	...

08003128 <_printf_i>:
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	9204      	str	r2, [sp, #16]
 800312e:	000a      	movs	r2, r1
 8003130:	3243      	adds	r2, #67	; 0x43
 8003132:	9305      	str	r3, [sp, #20]
 8003134:	9003      	str	r0, [sp, #12]
 8003136:	9202      	str	r2, [sp, #8]
 8003138:	7e0a      	ldrb	r2, [r1, #24]
 800313a:	000c      	movs	r4, r1
 800313c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800313e:	2a6e      	cmp	r2, #110	; 0x6e
 8003140:	d100      	bne.n	8003144 <_printf_i+0x1c>
 8003142:	e086      	b.n	8003252 <_printf_i+0x12a>
 8003144:	d81f      	bhi.n	8003186 <_printf_i+0x5e>
 8003146:	2a63      	cmp	r2, #99	; 0x63
 8003148:	d033      	beq.n	80031b2 <_printf_i+0x8a>
 800314a:	d808      	bhi.n	800315e <_printf_i+0x36>
 800314c:	2a00      	cmp	r2, #0
 800314e:	d100      	bne.n	8003152 <_printf_i+0x2a>
 8003150:	e08c      	b.n	800326c <_printf_i+0x144>
 8003152:	2a58      	cmp	r2, #88	; 0x58
 8003154:	d04d      	beq.n	80031f2 <_printf_i+0xca>
 8003156:	0025      	movs	r5, r4
 8003158:	3542      	adds	r5, #66	; 0x42
 800315a:	702a      	strb	r2, [r5, #0]
 800315c:	e030      	b.n	80031c0 <_printf_i+0x98>
 800315e:	2a64      	cmp	r2, #100	; 0x64
 8003160:	d001      	beq.n	8003166 <_printf_i+0x3e>
 8003162:	2a69      	cmp	r2, #105	; 0x69
 8003164:	d1f7      	bne.n	8003156 <_printf_i+0x2e>
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	6825      	ldr	r5, [r4, #0]
 800316a:	1d0a      	adds	r2, r1, #4
 800316c:	0628      	lsls	r0, r5, #24
 800316e:	d529      	bpl.n	80031c4 <_printf_i+0x9c>
 8003170:	6808      	ldr	r0, [r1, #0]
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	2800      	cmp	r0, #0
 8003176:	da03      	bge.n	8003180 <_printf_i+0x58>
 8003178:	232d      	movs	r3, #45	; 0x2d
 800317a:	9a02      	ldr	r2, [sp, #8]
 800317c:	4240      	negs	r0, r0
 800317e:	7013      	strb	r3, [r2, #0]
 8003180:	4e6b      	ldr	r6, [pc, #428]	; (8003330 <_printf_i+0x208>)
 8003182:	270a      	movs	r7, #10
 8003184:	e04f      	b.n	8003226 <_printf_i+0xfe>
 8003186:	2a73      	cmp	r2, #115	; 0x73
 8003188:	d074      	beq.n	8003274 <_printf_i+0x14c>
 800318a:	d808      	bhi.n	800319e <_printf_i+0x76>
 800318c:	2a6f      	cmp	r2, #111	; 0x6f
 800318e:	d01f      	beq.n	80031d0 <_printf_i+0xa8>
 8003190:	2a70      	cmp	r2, #112	; 0x70
 8003192:	d1e0      	bne.n	8003156 <_printf_i+0x2e>
 8003194:	2220      	movs	r2, #32
 8003196:	6809      	ldr	r1, [r1, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	6022      	str	r2, [r4, #0]
 800319c:	e003      	b.n	80031a6 <_printf_i+0x7e>
 800319e:	2a75      	cmp	r2, #117	; 0x75
 80031a0:	d016      	beq.n	80031d0 <_printf_i+0xa8>
 80031a2:	2a78      	cmp	r2, #120	; 0x78
 80031a4:	d1d7      	bne.n	8003156 <_printf_i+0x2e>
 80031a6:	0022      	movs	r2, r4
 80031a8:	2178      	movs	r1, #120	; 0x78
 80031aa:	3245      	adds	r2, #69	; 0x45
 80031ac:	7011      	strb	r1, [r2, #0]
 80031ae:	4e61      	ldr	r6, [pc, #388]	; (8003334 <_printf_i+0x20c>)
 80031b0:	e022      	b.n	80031f8 <_printf_i+0xd0>
 80031b2:	0025      	movs	r5, r4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	3542      	adds	r5, #66	; 0x42
 80031b8:	1d11      	adds	r1, r2, #4
 80031ba:	6019      	str	r1, [r3, #0]
 80031bc:	6813      	ldr	r3, [r2, #0]
 80031be:	702b      	strb	r3, [r5, #0]
 80031c0:	2301      	movs	r3, #1
 80031c2:	e065      	b.n	8003290 <_printf_i+0x168>
 80031c4:	6808      	ldr	r0, [r1, #0]
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	0669      	lsls	r1, r5, #25
 80031ca:	d5d3      	bpl.n	8003174 <_printf_i+0x4c>
 80031cc:	b200      	sxth	r0, r0
 80031ce:	e7d1      	b.n	8003174 <_printf_i+0x4c>
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	6825      	ldr	r5, [r4, #0]
 80031d4:	1d08      	adds	r0, r1, #4
 80031d6:	6018      	str	r0, [r3, #0]
 80031d8:	6808      	ldr	r0, [r1, #0]
 80031da:	062e      	lsls	r6, r5, #24
 80031dc:	d505      	bpl.n	80031ea <_printf_i+0xc2>
 80031de:	4e54      	ldr	r6, [pc, #336]	; (8003330 <_printf_i+0x208>)
 80031e0:	2708      	movs	r7, #8
 80031e2:	2a6f      	cmp	r2, #111	; 0x6f
 80031e4:	d01b      	beq.n	800321e <_printf_i+0xf6>
 80031e6:	270a      	movs	r7, #10
 80031e8:	e019      	b.n	800321e <_printf_i+0xf6>
 80031ea:	066d      	lsls	r5, r5, #25
 80031ec:	d5f7      	bpl.n	80031de <_printf_i+0xb6>
 80031ee:	b280      	uxth	r0, r0
 80031f0:	e7f5      	b.n	80031de <_printf_i+0xb6>
 80031f2:	3145      	adds	r1, #69	; 0x45
 80031f4:	4e4e      	ldr	r6, [pc, #312]	; (8003330 <_printf_i+0x208>)
 80031f6:	700a      	strb	r2, [r1, #0]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	1d01      	adds	r1, r0, #4
 80031fe:	6800      	ldr	r0, [r0, #0]
 8003200:	6019      	str	r1, [r3, #0]
 8003202:	0615      	lsls	r5, r2, #24
 8003204:	d521      	bpl.n	800324a <_printf_i+0x122>
 8003206:	07d3      	lsls	r3, r2, #31
 8003208:	d502      	bpl.n	8003210 <_printf_i+0xe8>
 800320a:	2320      	movs	r3, #32
 800320c:	431a      	orrs	r2, r3
 800320e:	6022      	str	r2, [r4, #0]
 8003210:	2710      	movs	r7, #16
 8003212:	2800      	cmp	r0, #0
 8003214:	d103      	bne.n	800321e <_printf_i+0xf6>
 8003216:	2320      	movs	r3, #32
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	439a      	bics	r2, r3
 800321c:	6022      	str	r2, [r4, #0]
 800321e:	0023      	movs	r3, r4
 8003220:	2200      	movs	r2, #0
 8003222:	3343      	adds	r3, #67	; 0x43
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	6863      	ldr	r3, [r4, #4]
 8003228:	60a3      	str	r3, [r4, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db58      	blt.n	80032e0 <_printf_i+0x1b8>
 800322e:	2204      	movs	r2, #4
 8003230:	6821      	ldr	r1, [r4, #0]
 8003232:	4391      	bics	r1, r2
 8003234:	6021      	str	r1, [r4, #0]
 8003236:	2800      	cmp	r0, #0
 8003238:	d154      	bne.n	80032e4 <_printf_i+0x1bc>
 800323a:	9d02      	ldr	r5, [sp, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d05a      	beq.n	80032f6 <_printf_i+0x1ce>
 8003240:	0025      	movs	r5, r4
 8003242:	7833      	ldrb	r3, [r6, #0]
 8003244:	3542      	adds	r5, #66	; 0x42
 8003246:	702b      	strb	r3, [r5, #0]
 8003248:	e055      	b.n	80032f6 <_printf_i+0x1ce>
 800324a:	0655      	lsls	r5, r2, #25
 800324c:	d5db      	bpl.n	8003206 <_printf_i+0xde>
 800324e:	b280      	uxth	r0, r0
 8003250:	e7d9      	b.n	8003206 <_printf_i+0xde>
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	680d      	ldr	r5, [r1, #0]
 8003256:	1d10      	adds	r0, r2, #4
 8003258:	6949      	ldr	r1, [r1, #20]
 800325a:	6018      	str	r0, [r3, #0]
 800325c:	6813      	ldr	r3, [r2, #0]
 800325e:	062e      	lsls	r6, r5, #24
 8003260:	d501      	bpl.n	8003266 <_printf_i+0x13e>
 8003262:	6019      	str	r1, [r3, #0]
 8003264:	e002      	b.n	800326c <_printf_i+0x144>
 8003266:	066d      	lsls	r5, r5, #25
 8003268:	d5fb      	bpl.n	8003262 <_printf_i+0x13a>
 800326a:	8019      	strh	r1, [r3, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	9d02      	ldr	r5, [sp, #8]
 8003270:	6123      	str	r3, [r4, #16]
 8003272:	e04f      	b.n	8003314 <_printf_i+0x1ec>
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	1d11      	adds	r1, r2, #4
 8003278:	6019      	str	r1, [r3, #0]
 800327a:	6815      	ldr	r5, [r2, #0]
 800327c:	2100      	movs	r1, #0
 800327e:	6862      	ldr	r2, [r4, #4]
 8003280:	0028      	movs	r0, r5
 8003282:	f000 f859 	bl	8003338 <memchr>
 8003286:	2800      	cmp	r0, #0
 8003288:	d001      	beq.n	800328e <_printf_i+0x166>
 800328a:	1b40      	subs	r0, r0, r5
 800328c:	6060      	str	r0, [r4, #4]
 800328e:	6863      	ldr	r3, [r4, #4]
 8003290:	6123      	str	r3, [r4, #16]
 8003292:	2300      	movs	r3, #0
 8003294:	9a02      	ldr	r2, [sp, #8]
 8003296:	7013      	strb	r3, [r2, #0]
 8003298:	e03c      	b.n	8003314 <_printf_i+0x1ec>
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	002a      	movs	r2, r5
 800329e:	9904      	ldr	r1, [sp, #16]
 80032a0:	9803      	ldr	r0, [sp, #12]
 80032a2:	9d05      	ldr	r5, [sp, #20]
 80032a4:	47a8      	blx	r5
 80032a6:	1c43      	adds	r3, r0, #1
 80032a8:	d03e      	beq.n	8003328 <_printf_i+0x200>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	079b      	lsls	r3, r3, #30
 80032ae:	d415      	bmi.n	80032dc <_printf_i+0x1b4>
 80032b0:	9b07      	ldr	r3, [sp, #28]
 80032b2:	68e0      	ldr	r0, [r4, #12]
 80032b4:	4298      	cmp	r0, r3
 80032b6:	da39      	bge.n	800332c <_printf_i+0x204>
 80032b8:	0018      	movs	r0, r3
 80032ba:	e037      	b.n	800332c <_printf_i+0x204>
 80032bc:	0022      	movs	r2, r4
 80032be:	2301      	movs	r3, #1
 80032c0:	3219      	adds	r2, #25
 80032c2:	9904      	ldr	r1, [sp, #16]
 80032c4:	9803      	ldr	r0, [sp, #12]
 80032c6:	9e05      	ldr	r6, [sp, #20]
 80032c8:	47b0      	blx	r6
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	d02c      	beq.n	8003328 <_printf_i+0x200>
 80032ce:	3501      	adds	r5, #1
 80032d0:	68e3      	ldr	r3, [r4, #12]
 80032d2:	9a07      	ldr	r2, [sp, #28]
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	42ab      	cmp	r3, r5
 80032d8:	dcf0      	bgt.n	80032bc <_printf_i+0x194>
 80032da:	e7e9      	b.n	80032b0 <_printf_i+0x188>
 80032dc:	2500      	movs	r5, #0
 80032de:	e7f7      	b.n	80032d0 <_printf_i+0x1a8>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d0ad      	beq.n	8003240 <_printf_i+0x118>
 80032e4:	9d02      	ldr	r5, [sp, #8]
 80032e6:	0039      	movs	r1, r7
 80032e8:	f7fc ff94 	bl	8000214 <__aeabi_uidivmod>
 80032ec:	5c73      	ldrb	r3, [r6, r1]
 80032ee:	3d01      	subs	r5, #1
 80032f0:	702b      	strb	r3, [r5, #0]
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d1f7      	bne.n	80032e6 <_printf_i+0x1be>
 80032f6:	2f08      	cmp	r7, #8
 80032f8:	d109      	bne.n	800330e <_printf_i+0x1e6>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	07db      	lsls	r3, r3, #31
 80032fe:	d506      	bpl.n	800330e <_printf_i+0x1e6>
 8003300:	6863      	ldr	r3, [r4, #4]
 8003302:	6922      	ldr	r2, [r4, #16]
 8003304:	4293      	cmp	r3, r2
 8003306:	dc02      	bgt.n	800330e <_printf_i+0x1e6>
 8003308:	2330      	movs	r3, #48	; 0x30
 800330a:	3d01      	subs	r5, #1
 800330c:	702b      	strb	r3, [r5, #0]
 800330e:	9b02      	ldr	r3, [sp, #8]
 8003310:	1b5b      	subs	r3, r3, r5
 8003312:	6123      	str	r3, [r4, #16]
 8003314:	9b05      	ldr	r3, [sp, #20]
 8003316:	aa07      	add	r2, sp, #28
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	0021      	movs	r1, r4
 800331c:	9b04      	ldr	r3, [sp, #16]
 800331e:	9803      	ldr	r0, [sp, #12]
 8003320:	f7ff fe94 	bl	800304c <_printf_common>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d1b8      	bne.n	800329a <_printf_i+0x172>
 8003328:	2001      	movs	r0, #1
 800332a:	4240      	negs	r0, r0
 800332c:	b009      	add	sp, #36	; 0x24
 800332e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003330:	08003651 	.word	0x08003651
 8003334:	08003662 	.word	0x08003662

08003338 <memchr>:
 8003338:	b2c9      	uxtb	r1, r1
 800333a:	1882      	adds	r2, r0, r2
 800333c:	4290      	cmp	r0, r2
 800333e:	d101      	bne.n	8003344 <memchr+0xc>
 8003340:	2000      	movs	r0, #0
 8003342:	4770      	bx	lr
 8003344:	7803      	ldrb	r3, [r0, #0]
 8003346:	428b      	cmp	r3, r1
 8003348:	d0fb      	beq.n	8003342 <memchr+0xa>
 800334a:	3001      	adds	r0, #1
 800334c:	e7f6      	b.n	800333c <memchr+0x4>

0800334e <memcpy>:
 800334e:	2300      	movs	r3, #0
 8003350:	b510      	push	{r4, lr}
 8003352:	429a      	cmp	r2, r3
 8003354:	d100      	bne.n	8003358 <memcpy+0xa>
 8003356:	bd10      	pop	{r4, pc}
 8003358:	5ccc      	ldrb	r4, [r1, r3]
 800335a:	54c4      	strb	r4, [r0, r3]
 800335c:	3301      	adds	r3, #1
 800335e:	e7f8      	b.n	8003352 <memcpy+0x4>

08003360 <memmove>:
 8003360:	b510      	push	{r4, lr}
 8003362:	4288      	cmp	r0, r1
 8003364:	d902      	bls.n	800336c <memmove+0xc>
 8003366:	188b      	adds	r3, r1, r2
 8003368:	4298      	cmp	r0, r3
 800336a:	d303      	bcc.n	8003374 <memmove+0x14>
 800336c:	2300      	movs	r3, #0
 800336e:	e007      	b.n	8003380 <memmove+0x20>
 8003370:	5c8b      	ldrb	r3, [r1, r2]
 8003372:	5483      	strb	r3, [r0, r2]
 8003374:	3a01      	subs	r2, #1
 8003376:	d2fb      	bcs.n	8003370 <memmove+0x10>
 8003378:	bd10      	pop	{r4, pc}
 800337a:	5ccc      	ldrb	r4, [r1, r3]
 800337c:	54c4      	strb	r4, [r0, r3]
 800337e:	3301      	adds	r3, #1
 8003380:	429a      	cmp	r2, r3
 8003382:	d1fa      	bne.n	800337a <memmove+0x1a>
 8003384:	e7f8      	b.n	8003378 <memmove+0x18>
	...

08003388 <_free_r>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	0005      	movs	r5, r0
 800338c:	2900      	cmp	r1, #0
 800338e:	d010      	beq.n	80033b2 <_free_r+0x2a>
 8003390:	1f0c      	subs	r4, r1, #4
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	da00      	bge.n	800339a <_free_r+0x12>
 8003398:	18e4      	adds	r4, r4, r3
 800339a:	0028      	movs	r0, r5
 800339c:	f000 f8d4 	bl	8003548 <__malloc_lock>
 80033a0:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <_free_r+0x90>)
 80033a2:	6813      	ldr	r3, [r2, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <_free_r+0x2c>
 80033a8:	6063      	str	r3, [r4, #4]
 80033aa:	6014      	str	r4, [r2, #0]
 80033ac:	0028      	movs	r0, r5
 80033ae:	f000 f8cc 	bl	800354a <__malloc_unlock>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	d909      	bls.n	80033cc <_free_r+0x44>
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	1860      	adds	r0, r4, r1
 80033bc:	4283      	cmp	r3, r0
 80033be:	d1f3      	bne.n	80033a8 <_free_r+0x20>
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	1841      	adds	r1, r0, r1
 80033c6:	6021      	str	r1, [r4, #0]
 80033c8:	e7ee      	b.n	80033a8 <_free_r+0x20>
 80033ca:	0013      	movs	r3, r2
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	d001      	beq.n	80033d6 <_free_r+0x4e>
 80033d2:	42a2      	cmp	r2, r4
 80033d4:	d9f9      	bls.n	80033ca <_free_r+0x42>
 80033d6:	6819      	ldr	r1, [r3, #0]
 80033d8:	1858      	adds	r0, r3, r1
 80033da:	42a0      	cmp	r0, r4
 80033dc:	d10b      	bne.n	80033f6 <_free_r+0x6e>
 80033de:	6820      	ldr	r0, [r4, #0]
 80033e0:	1809      	adds	r1, r1, r0
 80033e2:	1858      	adds	r0, r3, r1
 80033e4:	6019      	str	r1, [r3, #0]
 80033e6:	4282      	cmp	r2, r0
 80033e8:	d1e0      	bne.n	80033ac <_free_r+0x24>
 80033ea:	6810      	ldr	r0, [r2, #0]
 80033ec:	6852      	ldr	r2, [r2, #4]
 80033ee:	1841      	adds	r1, r0, r1
 80033f0:	6019      	str	r1, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	e7da      	b.n	80033ac <_free_r+0x24>
 80033f6:	42a0      	cmp	r0, r4
 80033f8:	d902      	bls.n	8003400 <_free_r+0x78>
 80033fa:	230c      	movs	r3, #12
 80033fc:	602b      	str	r3, [r5, #0]
 80033fe:	e7d5      	b.n	80033ac <_free_r+0x24>
 8003400:	6821      	ldr	r1, [r4, #0]
 8003402:	1860      	adds	r0, r4, r1
 8003404:	4282      	cmp	r2, r0
 8003406:	d103      	bne.n	8003410 <_free_r+0x88>
 8003408:	6810      	ldr	r0, [r2, #0]
 800340a:	6852      	ldr	r2, [r2, #4]
 800340c:	1841      	adds	r1, r0, r1
 800340e:	6021      	str	r1, [r4, #0]
 8003410:	6062      	str	r2, [r4, #4]
 8003412:	605c      	str	r4, [r3, #4]
 8003414:	e7ca      	b.n	80033ac <_free_r+0x24>
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	200000a0 	.word	0x200000a0

0800341c <_malloc_r>:
 800341c:	2303      	movs	r3, #3
 800341e:	b570      	push	{r4, r5, r6, lr}
 8003420:	1ccd      	adds	r5, r1, #3
 8003422:	439d      	bics	r5, r3
 8003424:	3508      	adds	r5, #8
 8003426:	0006      	movs	r6, r0
 8003428:	2d0c      	cmp	r5, #12
 800342a:	d21e      	bcs.n	800346a <_malloc_r+0x4e>
 800342c:	250c      	movs	r5, #12
 800342e:	42a9      	cmp	r1, r5
 8003430:	d81d      	bhi.n	800346e <_malloc_r+0x52>
 8003432:	0030      	movs	r0, r6
 8003434:	f000 f888 	bl	8003548 <__malloc_lock>
 8003438:	4a25      	ldr	r2, [pc, #148]	; (80034d0 <_malloc_r+0xb4>)
 800343a:	6814      	ldr	r4, [r2, #0]
 800343c:	0021      	movs	r1, r4
 800343e:	2900      	cmp	r1, #0
 8003440:	d119      	bne.n	8003476 <_malloc_r+0x5a>
 8003442:	4c24      	ldr	r4, [pc, #144]	; (80034d4 <_malloc_r+0xb8>)
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <_malloc_r+0x36>
 800344a:	0030      	movs	r0, r6
 800344c:	f000 f86a 	bl	8003524 <_sbrk_r>
 8003450:	6020      	str	r0, [r4, #0]
 8003452:	0029      	movs	r1, r5
 8003454:	0030      	movs	r0, r6
 8003456:	f000 f865 	bl	8003524 <_sbrk_r>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d12b      	bne.n	80034b6 <_malloc_r+0x9a>
 800345e:	230c      	movs	r3, #12
 8003460:	0030      	movs	r0, r6
 8003462:	6033      	str	r3, [r6, #0]
 8003464:	f000 f871 	bl	800354a <__malloc_unlock>
 8003468:	e003      	b.n	8003472 <_malloc_r+0x56>
 800346a:	2d00      	cmp	r5, #0
 800346c:	dadf      	bge.n	800342e <_malloc_r+0x12>
 800346e:	230c      	movs	r3, #12
 8003470:	6033      	str	r3, [r6, #0]
 8003472:	2000      	movs	r0, #0
 8003474:	bd70      	pop	{r4, r5, r6, pc}
 8003476:	680b      	ldr	r3, [r1, #0]
 8003478:	1b5b      	subs	r3, r3, r5
 800347a:	d419      	bmi.n	80034b0 <_malloc_r+0x94>
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d903      	bls.n	8003488 <_malloc_r+0x6c>
 8003480:	600b      	str	r3, [r1, #0]
 8003482:	18cc      	adds	r4, r1, r3
 8003484:	6025      	str	r5, [r4, #0]
 8003486:	e003      	b.n	8003490 <_malloc_r+0x74>
 8003488:	684b      	ldr	r3, [r1, #4]
 800348a:	428c      	cmp	r4, r1
 800348c:	d10d      	bne.n	80034aa <_malloc_r+0x8e>
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	0030      	movs	r0, r6
 8003492:	f000 f85a 	bl	800354a <__malloc_unlock>
 8003496:	0020      	movs	r0, r4
 8003498:	2207      	movs	r2, #7
 800349a:	300b      	adds	r0, #11
 800349c:	1d23      	adds	r3, r4, #4
 800349e:	4390      	bics	r0, r2
 80034a0:	1ac3      	subs	r3, r0, r3
 80034a2:	d0e7      	beq.n	8003474 <_malloc_r+0x58>
 80034a4:	425a      	negs	r2, r3
 80034a6:	50e2      	str	r2, [r4, r3]
 80034a8:	e7e4      	b.n	8003474 <_malloc_r+0x58>
 80034aa:	6063      	str	r3, [r4, #4]
 80034ac:	000c      	movs	r4, r1
 80034ae:	e7ef      	b.n	8003490 <_malloc_r+0x74>
 80034b0:	000c      	movs	r4, r1
 80034b2:	6849      	ldr	r1, [r1, #4]
 80034b4:	e7c3      	b.n	800343e <_malloc_r+0x22>
 80034b6:	2303      	movs	r3, #3
 80034b8:	1cc4      	adds	r4, r0, #3
 80034ba:	439c      	bics	r4, r3
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d0e1      	beq.n	8003484 <_malloc_r+0x68>
 80034c0:	1a21      	subs	r1, r4, r0
 80034c2:	0030      	movs	r0, r6
 80034c4:	f000 f82e 	bl	8003524 <_sbrk_r>
 80034c8:	1c43      	adds	r3, r0, #1
 80034ca:	d1db      	bne.n	8003484 <_malloc_r+0x68>
 80034cc:	e7c7      	b.n	800345e <_malloc_r+0x42>
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	200000a0 	.word	0x200000a0
 80034d4:	200000a4 	.word	0x200000a4

080034d8 <_realloc_r>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	0007      	movs	r7, r0
 80034dc:	000d      	movs	r5, r1
 80034de:	0016      	movs	r6, r2
 80034e0:	2900      	cmp	r1, #0
 80034e2:	d105      	bne.n	80034f0 <_realloc_r+0x18>
 80034e4:	0011      	movs	r1, r2
 80034e6:	f7ff ff99 	bl	800341c <_malloc_r>
 80034ea:	0004      	movs	r4, r0
 80034ec:	0020      	movs	r0, r4
 80034ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f0:	2a00      	cmp	r2, #0
 80034f2:	d103      	bne.n	80034fc <_realloc_r+0x24>
 80034f4:	f7ff ff48 	bl	8003388 <_free_r>
 80034f8:	0034      	movs	r4, r6
 80034fa:	e7f7      	b.n	80034ec <_realloc_r+0x14>
 80034fc:	f000 f826 	bl	800354c <_malloc_usable_size_r>
 8003500:	002c      	movs	r4, r5
 8003502:	42b0      	cmp	r0, r6
 8003504:	d2f2      	bcs.n	80034ec <_realloc_r+0x14>
 8003506:	0031      	movs	r1, r6
 8003508:	0038      	movs	r0, r7
 800350a:	f7ff ff87 	bl	800341c <_malloc_r>
 800350e:	1e04      	subs	r4, r0, #0
 8003510:	d0ec      	beq.n	80034ec <_realloc_r+0x14>
 8003512:	0029      	movs	r1, r5
 8003514:	0032      	movs	r2, r6
 8003516:	f7ff ff1a 	bl	800334e <memcpy>
 800351a:	0029      	movs	r1, r5
 800351c:	0038      	movs	r0, r7
 800351e:	f7ff ff33 	bl	8003388 <_free_r>
 8003522:	e7e3      	b.n	80034ec <_realloc_r+0x14>

08003524 <_sbrk_r>:
 8003524:	2300      	movs	r3, #0
 8003526:	b570      	push	{r4, r5, r6, lr}
 8003528:	4c06      	ldr	r4, [pc, #24]	; (8003544 <_sbrk_r+0x20>)
 800352a:	0005      	movs	r5, r0
 800352c:	0008      	movs	r0, r1
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	f7fd febe 	bl	80012b0 <_sbrk>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	d103      	bne.n	8003540 <_sbrk_r+0x1c>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d000      	beq.n	8003540 <_sbrk_r+0x1c>
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	bd70      	pop	{r4, r5, r6, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	20000124 	.word	0x20000124

08003548 <__malloc_lock>:
 8003548:	4770      	bx	lr

0800354a <__malloc_unlock>:
 800354a:	4770      	bx	lr

0800354c <_malloc_usable_size_r>:
 800354c:	1f0b      	subs	r3, r1, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1f18      	subs	r0, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	da01      	bge.n	800355a <_malloc_usable_size_r+0xe>
 8003556:	580b      	ldr	r3, [r1, r0]
 8003558:	18c0      	adds	r0, r0, r3
 800355a:	4770      	bx	lr

0800355c <_init>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr

08003568 <_fini>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr
